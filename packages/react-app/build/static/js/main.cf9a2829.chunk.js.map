{"version":3,"sources":["constants.js","components/Address.jsx","components/Account.jsx","components/Blockie.jsx","components/AddressInput.jsx","components/Balance.jsx","components/BytesStringInput.jsx","components/Contract/utils.jsx","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Events.jsx","components/Wallet.jsx","components/Faucet.jsx","components/Header.jsx","components/Swap.jsx","components/Timeline.jsx","components/L2Bridge.jsx","components/NetworkDisplay.jsx","components/FaucetHint.jsx","components/NetworkSwitch.jsx","helpers/Transactor.js","helpers/Web3ModalSetup.js","helpers/ipfs.js","components/FAQ.jsx","components/Copyright.jsx","views/Home.jsx","views/ExampleUI.jsx","views/Hints.jsx","views/Subgraph.jsx","App.jsx","index.jsx","hooks/useDebounce.js","hooks/useStaticJsonRPC.js","helpers/loadAppContracts.js","contracts/external_contracts.js","components/TotalSupply.jsx","components/Emojiboards.js","../../../node_modules/prettier sync","components/Emojiform.jsx","components/LoadingIndicator.jsx"],"names":["INFURA_ID","BLOCKNATIVE_DAPPID","ALCHEMY_KEY","NETWORKS","localhost","name","color","chainId","blockExplorer","rpcUrl","global","window","location","hostname","mainnet","kovan","faucet","rinkeby","ropsten","goerli","xdai","price","gasPrice","polygon","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","localOptimismL1","localOptimism","kovanOptimism","optimism","localAvalanche","fujiAvalanche","mainnetAvalanche","testnetHarmony","mainnetHarmony","fantom","testnetFantom","NETWORK","n","Text","Typography","Address","props","address","value","ens","useLookupAddress","ensProvider","ensSplit","split","validEnsCheck","length","etherscanLink","blockExplorerLink","displayAddress","substr","size","style","verticalAlign","paddingLeft","paddingRight","lineHeight","fontSize","onChange","editable","copyable","text","fontFamily","fontWeight","marginTop","target","href","rel","paddingTop","avatar","paragraph","rows","Account","useBurner","mainnetProvider","userSigner","localProvider","minimized","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","isContract","modalButtons","useThemeSwitcher","currentTheme","cachedProvider","push","type","marginLeft","shape","icon","WalletOutlined","onClick","backgroundColor","display","Blockie","toLowerCase","seed","isENS","endsWith","AddressInput","useState","setValue","scan","setScan","currentValue","updateAddress","useCallback","newValue","a","resolveName","possibleAddress","zIndex","position","left","top","width","delay","resolution","onError","e","console","log","onScan","possibleNewValue","indexOf","lastIndexOf","id","autoComplete","autoFocus","placeholder","prefix","scale","ethers","utils","isAddress","addonAfter","cursor","count","CameraOutlined","QrcodeOutlined","require","Balance","dollarMode","setDollarMode","balance","useBalance","provider","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","dollarMultiplier","padding","constants","tryToDisplay","thing","asText","toNumber","displayable","formatUnits","overflowWrap","constructor","mostReadable","v","includes","tryToDisplayAsText","JSON","stringify","map","replaceAll","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","useEffect","span","textAlign","opacity","BigNumber","getFunctionInputKey","input","inputIndex","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","tx","Transactor","inputs","key","buttons","placement","title","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","hexlify","toUtf8Bytes","parseEther","trim","margin","event","suffix","txValueInput","floatValue","from","toHexString","payable","handleForm","returned","buttonIcon","defaultValue","bordered","disabled","height","args","baseType","parse","stateMutability","result","error","overrides","noContractDisplay","className","borderRadius","marginRight","role","Contract","contract","customContract","account","signer","show","contractConfig","contracts","useContractLoader","contractIsDeployed","useContractExistsAtAddress","displayedContractFunctions","useMemo","Object","entries","interface","functions","filter","fn","contractDisplay","contractFuncInfo","contractFunc","connect","float","loading","Events","contractName","eventName","startBlock","events","useEventListener","paddingBottom","dataSource","renderItem","item","Item","blockNumber","sender","purpose","Paragraph","Header","ghost","Select","Option","NetworkDisplay","NETWORKCHECK","localChainId","selectedChainId","targetNetwork","USE_NETWORK_SELECTOR","networkDisplay","networkSelected","networkLocal","right","message","description","closable","ethereum","data","toString","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","switchTx","FaucetHint","NetworkSwitch","networkOptions","selectedNetwork","setSelectedNetwork","menu","i","textTransform","Button","overlay","trigger","callbacks","providerOrSigner","etherscan","callback","Signer","isSigner","getNetwork","network","_isProvider","getSigner","notify","options","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","hash","Notify","etherscanNetwork","etherscanTxUrl","Promise","parseUnits","gasLimit","sendTransaction","emitter","on","onclick","open","notification","info","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","body","obj","errorObj","walletLinkProvider","WalletLink","appName","makeWeb3Provider","web3ModalSetup","Web3Modal","cacheProvider","theme","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","rpc","portis","logo","Portis","fortmatic","Fortmatic","connector","_options","enable","authereum","Authereum","create","host","port","protocol","Panel","Collapse","FAQ","defaultActiveKey","maxWidth","header","Copyright","marginBottom","textDecoration","Date","getFullYear","Home","yourLocalBalance","readContracts","Content","Layout","textShadow","Emojiform","TotalSupply","Emojiboards","ExampleUI","writeContracts","newPurpose","setNewPurpose","border","YourContract","setPurpose","update","status","gasUsed","gas","to","encodeFunctionData","SyncOutlined","spin","range","defaultChecked","percent","Hints","selectedToken","setSelectedToken","listOfTokens","useTokenList","showSearch","filterOption","option","children","optionFilterProp","token","symbol","highlight","Subgraph","EXAMPLE_GRAPHQL","EXAMPLE_GQL","gql","useQuery","pollInterval","purposeColumns","dataIndex","render","record","d","toISOString","deployWarning","purposes","columns","rowKey","fetcher","graphQLParams","fetch","subgraphUri","headers","then","response","json","docExplorerOpen","query","initialNetwork","DEBUG","Web3ModalSetup","providers","App","injectedProvider","setInjectedProvider","setAddress","useLocation","useStaticJsonRPC","process","clearCachedProvider","disconnect","setTimeout","reload","useExchangeEthPrice","useGasPrice","useUserProviderAndSigner","getAddress","newAddress","_network","yourMainnetBalance","deployedContracts","externalContracts","mainnetContracts","useOnBlock","_lastBlockNumber","myMainnetDAIBalance","useContractReader","Web3Provider","code","reason","exact","path","DAI","flex","alignItems","themes","dark","light","prevTheme","localStorage","getItem","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","ApolloProvider","themeMap","defaultTheme","document","getElementById","useDebounce","debouncedValue","setDebouncedValue","handler","clearTimeout","createProvider","url","p","StaticJsonRpcProvider","ready","urlArray","setProvider","handleProviders","race","_p","module","exports","abi","internalType","anonymous","indexed","constant","outputs","UNI","totalSupply","setTotalSupply","Accept","total","boxSizing","background","MORALIS_API_KEY","OPENSEA_CONTRACT_ADDRESS","emojiboards","setEmojiboards","userEmojiboards","setUserEmojiboards","extractImage","Buffer","substring","image","emojiboard","token_id","token_uri","sort","b","PreviewGroup","src","alt","webpackEmptyContext","req","Error","keys","resolve","EmojiForm","formValues","setFormValues","mintState","setMintState","mintedEmojiboard","setMintedEmojiboard","EmojiverseContract","askContractToMintNft","emojis","messages","Emojiverse","mintEmojiverseNFT","mintTxn","tokenId","tokenURI","handleEmoji","msg","emoji","GraphemeSplitter","splitGraphemes","test","onFinish","values","msg1","msg2","msg3","msg4","Group","rules","required","emoji1","visibility","maxLength","emoji2","emoji3","emoji4","colon","htmlType","pt","pb","LoadingIndicator"],"mappings":"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","file":"static/js/main.cf9a2829.chunk.js","sourcesContent":["// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\nexport const INFURA_ID = \"58d4089892db4b47ba362b0f7a484dbe\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"G8KN1SDD1B8FGT1RW5HIJS68GEGYFEX694\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\n// export const ALCHEMY_KEY = \"oKxs-03sij-U_N0iOlrSsZFr29-IqbuF\";\nexport const ALCHEMY_KEY = \"a1YoR2Hyk8vQhfIx65XuIz0AWr2JjaM6\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  kovan: {\n    name: \"kovan\",\n    color: \"#7003DD\",\n    chainId: 42,\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://kovan.etherscan.io/\",\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\n  },\n  rinkeby: {\n    name: \"rinkeby\",\n    color: \"#e0d068\",\n    chainId: 4,\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\n    faucet: \"https://faucet.rinkeby.io/\",\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\n  },\n  ropsten: {\n    name: \"ropsten\",\n    color: \"#F60D09\",\n    chainId: 3,\n    faucet: \"https://faucet.ropsten.be/\",\n    blockExplorer: \"https://ropsten.etherscan.io/\",\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  xdai: {\n    name: \"xdai\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://dai.poa.network\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  polygon: {\n    name: \"polygon\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://polygon-rpc.com/\",\n    blockExplorer: \"https://polygonscan.com/\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.polygon.technology/\",\n    blockExplorer: \"https://mumbai.polygonscan.com/\",\n  },\n  localArbitrum: {\n    name: \"localArbitrum\",\n    color: \"#50a0ea\",\n    chainId: 153869338190755,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:8547`,\n  },\n  localArbitrumL1: {\n    name: \"localArbitrumL1\",\n    color: \"#50a0ea\",\n    chainId: 44010,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:7545`,\n  },\n  rinkebyArbitrum: {\n    name: \"Arbitrum Testnet\",\n    color: \"#50a0ea\",\n    chainId: 421611,\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\n  },\n  arbitrum: {\n    name: \"Arbitrum\",\n    color: \"#50a0ea\",\n    chainId: 42161,\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\n    gasPrice: 0,\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\n    gasPrice: 0,\n  },\n  kovanOptimism: {\n    name: \"kovanOptimism\",\n    color: \"#f01a37\",\n    chainId: 69,\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\n    rpcUrl: `https://kovan.optimism.io`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n  localAvalanche: {\n    name: \"localAvalanche\",\n    color: \"#666666\",\n    chainId: 43112,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  fujiAvalanche: {\n    name: \"fujiAvalanche\",\n    color: \"#666666\",\n    chainId: 43113,\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  mainnetAvalanche: {\n    name: \"mainnetAvalanche\",\n    color: \"#666666\",\n    chainId: 43114,\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  testnetHarmony: {\n    name: \"testnetHarmony\",\n    color: \"#00b0ef\",\n    chainId: 1666700000,\n    blockExplorer: \"https://explorer.pops.one/\",\n    rpcUrl: `https://api.s0.b.hmny.io`,\n    gasPrice: 1000000000,\n  },\n  mainnetHarmony: {\n    name: \"mainnetHarmony\",\n    color: \"#00b0ef\",\n    chainId: 1666600000,\n    blockExplorer: \"https://explorer.harmony.one/\",\n    rpcUrl: `https://api.harmony.one`,\n    gasPrice: 1000000000,\n  },\n  fantom: {\n    name: \"fantom\",\n    color: \"#1969ff\",\n    chainId: 250,\n    blockExplorer: \"https://ftmscan.com/\",\n    rpcUrl: `https://rpcapi.fantom.network`,\n    gasPrice: 1000000000,\n  },\n  testnetFantom: {\n    name: \"testnetFantom\",\n    color: \"#1969ff\",\n    chainId: 4002,\n    blockExplorer: \"https://testnet.ftmscan.com/\",\n    rpcUrl: `https://rpc.testnet.fantom.network`,\n    gasPrice: 1000000000,\n    faucet: \"https://faucet.fantom.network/\",\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n","import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\n\n// changed value={address} to address={address}\n\nconst { Text } = Typography;\n\n/** \n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n**/\n\nconst blockExplorerLink = (address, blockExplorer) =>\n  `${blockExplorer || \"https://rinkeby.etherscan.io/\"}address/${address}`;\n\nexport default function Address(props) {\n  const address = props.value || props.address;\n  const ens = useLookupAddress(props.ensProvider, address);\n  const ensSplit = ens && ens.split(\".\");\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === \"eth\";\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  let displayAddress = address?.substr(0, 5) + \"•••\" + address?.substr(-4);\n\n  if (validEnsCheck) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  return (\n    <span>\n      <span\n        style={{\n          verticalAlign: \"bottom\",\n          paddingLeft: 5,\n          paddingRight: 5,\n          lineHeight: 2,\n          fontSize: \"20px\",\n        }}\n      >\n        {props.onChange ? (\n          <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n            <a\n              style={{ color: \"#fff\", fontFamily: \"Poppins\", fontWeight: 300, marginTop: 50 }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        ) : (\n          <Text copyable={{ text: address }}>\n            <a\n              style={{ color: \"#fff\", fontFamily: \"Poppins\", fontWeight: 300, paddingTop: 50 }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        )}\n      </span>\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport { WalletOutlined } from \"@ant-design/icons\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nimport Address from \"./Address\";\n\n/** \n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    useBurner={boolean}\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n    isContract={boolean}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n**/\n\nexport default function Account({\n  useBurner,\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n  isContract,\n}) {\n  const { currentTheme } = useThemeSwitcher();\n\n  const modalButtons = [];\n  if (web3Modal) {\n    if (web3Modal.cachedProvider) {\n      modalButtons.push(\n        <Button\n          type=\"secondary\"\n          key=\"logoutbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          icon={<WalletOutlined />}\n          size=\"large\"\n          onClick={logoutOfWeb3Modal}\n        >\n          logout\n        </Button>,\n      );\n    } else {\n      modalButtons.push(\n        <Button\n          type=\"primary\"\n          key=\"loginbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4, backgroundColor: \"#FEE440\", color: \"#222\" }}\n          shape=\"round\"\n          icon={<WalletOutlined />}\n          size=\"large\"\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\n          onClick={loadWeb3Modal}\n        >\n          connect\n        </Button>,\n      );\n    }\n  }\n  const display = minimized ? (\n    \"\"\n  ) : (\n    <span>\n      {web3Modal && web3Modal.cachedProvider ? (\n        <>{address && <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />}</>\n      ) : useBurner ? (\n        \"\"\n      ) : isContract ? (\n        <>{address && <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />}</>\n      ) : (\n        \"\"\n      )}\n      {useBurner && web3Modal && !web3Modal.cachedProvider ? (\n        <>\n          <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\n        </>\n      ) : (\n        <></>\n      )}\n    </span>\n  );\n\n  return (\n    <div>\n      {display}\n      {modalButtons}\n    </div>\n  );\n}\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\n\n// provides a blockie image for the address using \"react-blockies\" library\n\nexport default function Blockie(props) {\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\n    return <span />;\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\n}\n","import { Badge, Input } from \"antd\";\nimport React, { useCallback, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport QrReader from \"react-qr-reader\";\n\nimport Blockie from \"./Blockie\";\n\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/** \n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n**/\nexport default function AddressInput(props) {\n  const { ensProvider, onChange } = props;\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (isENS(address)) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  return (\n    <div>\n      {scan ? (\n        <div\n          style={{\n            zIndex: 256,\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            width: \"100%\",\n          }}\n          onClick={() => {\n            setScan(false);\n          }}\n        >\n          <QrReader\n            delay={250}\n            resolution={1200}\n            onError={e => {\n              console.log(\"SCAN ERROR\", e);\n              setScan(false);\n            }}\n            onScan={newValue => {\n              if (newValue) {\n                console.log(\"SCAN VALUE\", newValue);\n                let possibleNewValue = newValue;\n                if (possibleNewValue.indexOf(\"/\") >= 0) {\n                  possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n                  console.log(\"CLEANED VALUE\", possibleNewValue);\n                }\n                setScan(false);\n                updateAddress(possibleNewValue);\n              }\n            }}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n      ) : (\n        \"\"\n      )}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue}\n        addonAfter={\n          <div\n            style={{ marginTop: 4, cursor: \"pointer\" }}\n            onClick={() => {\n              setScan(!scan);\n            }}\n          >\n            <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n              <QrcodeOutlined style={{ fontSize: 18 }} />\n            </Badge>{\" \"}\n            Scan\n          </div>\n        }\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useBalance } from \"eth-hooks\";\n\nconst { utils } = require(\"ethers\");\n\n/** \n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n**/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  const balance = useBalance(props.provider, props.address);\n  let floatBalance = parseFloat(\"0.00\");\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") usingBalance = props.balance;\n  if (typeof props.value !== \"undefined\") usingBalance = props.value;\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier || 1;\n\n  if (dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/** \n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n**/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\n\nimport Address from \"../Address\";\n\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = (thing, asText = false, blockExplorer) => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      const displayable = \"Ξ\" + utils.formatUnits(thing, \"ether\");\n      return asText ? displayable : <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable}</span>;\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return asText ? thing : <Address address={thing} fontSize={22} blockExplorer={blockExplorer} />;\n  }\n  if (thing && thing.constructor && thing.constructor.name === \"Array\") {\n    const mostReadable = v => ([\"number\", \"boolean\"].includes(typeof v) ? v : tryToDisplayAsText(v));\n    const displayable = JSON.stringify(thing.map(mostReadable));\n    return asText ? (\n      displayable\n    ) : (\n      <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable.replaceAll(\",\", \",\\n\")}</span>\n    );\n  }\n  return JSON.stringify(thing);\n};\n\nconst tryToDisplayAsText = thing => tryToDisplay(thing, true);\n\nexport { tryToDisplay, tryToDisplayAsText };\n","import { Button, Col, Divider, Row } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\n\nimport { tryToDisplay } from \"./utils\";\n\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh, blockExplorer }) => {\n  const [variable, setVariable] = useState(\"\");\n\n  const refresh = useCallback(async () => {\n    try {\n      const funcResponse = await contractFunction();\n      setVariable(funcResponse);\n      triggerRefresh(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }, [setVariable, contractFunction, triggerRefresh]);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh, refreshRequired, contractFunction]);\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={14}>\n          <h2>{tryToDisplay(variable, false, blockExplorer)}</h2>\n        </Col>\n        <Col span={2}>\n          <h2>\n            <Button type=\"link\" onClick={refresh} icon=\"🔄\" />\n          </h2>\n        </Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n};\n\nexport default DisplayVariable;\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\n\nimport { Transactor } from \"../../helpers\";\nimport { tryToDisplay, tryToDisplayAsText } from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\n};\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const handleForm = returned => {\n    if (returned) {\n      setForm({});\n    }\n  };\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              const args = functionInfo.inputs.map((input, inputIndex) => {\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                try {\n                  const returned = await contractFunction(...args);\n                  handleForm(returned);\n                  result = tryToDisplayAsText(returned);\n                } catch (err) {\n                  console.error(err);\n                }\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                handleForm(returned);\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { Card } from \"antd\";\nimport { useContractExistsAtAddress, useContractLoader } from \"eth-hooks\";\nimport React, { useMemo, useState } from \"react\";\nimport Address from \"../Address\";\nimport Balance from \"../Balance\";\nimport DisplayVariable from \"./DisplayVariable\";\nimport FunctionForm from \"./FunctionForm\";\n\nconst noContractDisplay = (\n  <div>\n    Loading...{\" \"}\n    <div style={{ padding: 32 }}>\n      You need to run{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run chain\n      </span>{\" \"}\n      and{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      to see your contract here.\n    </div>\n    <div style={{ padding: 32 }}>\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\n        ☢️\n      </span>\n      Warning: You might need to run\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      <i>again</i> after the frontend comes up!\n    </div>\n  </div>\n);\n\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\n\nexport default function Contract({\n  customContract,\n  account,\n  gasPrice,\n  signer,\n  provider,\n  name,\n  show,\n  price,\n  blockExplorer,\n  chainId,\n  contractConfig,\n}) {\n  const contracts = useContractLoader(provider, contractConfig, chainId);\n  let contract;\n  if (!customContract) {\n    contract = contracts ? contracts[name] : \"\";\n  } else {\n    contract = customContract;\n  }\n\n  const address = contract ? contract.address : \"\";\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\n\n  const displayedContractFunctions = useMemo(() => {\n    const results = contract\n      ? Object.entries(contract.interface.functions).filter(\n          fn => fn[1][\"type\"] === \"function\" && !(show && show.indexOf(fn[1][\"name\"]) < 0),\n        )\n      : [];\n    return results;\n  }, [contract, show]);\n\n  const [refreshRequired, triggerRefresh] = useState(false);\n  const contractDisplay = displayedContractFunctions.map(contractFuncInfo => {\n    const contractFunc =\n      contractFuncInfo[1].stateMutability === \"view\" || contractFuncInfo[1].stateMutability === \"pure\"\n        ? contract[contractFuncInfo[0]]\n        : contract.connect(signer)[contractFuncInfo[0]];\n\n    if (typeof contractFunc === \"function\") {\n      if (isQueryable(contractFuncInfo[1])) {\n        // If there are no inputs, just display return value\n        return (\n          <DisplayVariable\n            key={contractFuncInfo[1].name}\n            contractFunction={contractFunc}\n            functionInfo={contractFuncInfo[1]}\n            refreshRequired={refreshRequired}\n            triggerRefresh={triggerRefresh}\n            blockExplorer={blockExplorer}\n          />\n        );\n      }\n\n      // If there are inputs, display a form to allow users to provide these\n      return (\n        <FunctionForm\n          key={\"FF\" + contractFuncInfo[0]}\n          contractFunction={contractFunc}\n          functionInfo={contractFuncInfo[1]}\n          provider={provider}\n          gasPrice={gasPrice}\n          triggerRefresh={triggerRefresh}\n        />\n      );\n    }\n    return null;\n  });\n\n  return (\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\n      <Card\n        title={\n          <div style={{ fontSize: 24 }}>\n            {name}\n            <div style={{ float: \"right\" }}>\n              <Address value={address} />\n              <Balance address={address} provider={provider} price={price} />\n            </div>\n          </div>\n        }\n        size=\"large\"\n        style={{ marginTop: 25, width: \"100%\" }}\n        loading={contractDisplay && contractDisplay.length <= 0}\n      >\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\n      </Card>\n    </div>\n  );\n}\n","import { List } from \"antd\";\nimport { useEventListener } from \"eth-hooks/events/useEventListener\";\nimport Address from \"./Address\";\n\n/**\n  ~ What it does? ~\n\n  Displays a lists of events\n\n  ~ How can I use? ~\n\n  <Events\n    contracts={readContracts}\n    contractName=\"Emojiverse\"\n    eventName=\"SetPurpose\"\n    localProvider={localProvider}\n    mainnetProvider={mainnetProvider}\n    startBlock={1}\n  />\n**/\n\nexport default function Events({ contracts, contractName, eventName, localProvider, mainnetProvider, startBlock }) {\n  // 📟 Listen for broadcast events\n  const events = useEventListener(contracts, contractName, eventName, localProvider, startBlock);\n\n  return (\n    <div style={{ width: 600, margin: \"auto\", marginTop: 32, paddingBottom: 32 }}>\n      <h2>Events:</h2>\n      <List\n        bordered\n        dataSource={events}\n        renderItem={item => {\n          return (\n            <List.Item key={item.blockNumber + \"_\" + item.args.sender + \"_\" + item.args.purpose}>\n              <Address address={item.args[0]} ensProvider={mainnetProvider} fontSize={16} />\n              {item.args[1]}\n            </List.Item>\n          );\n        }}\n      />\n    </div>\n  );\n}\n","import { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport QR from \"qrcode.react\";\n\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\n\nconst { Text, Paragraph } = Typography;\n\n/**\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n**/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          console.log(key);\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      display = (\n        <div>\n          <b>Private Key:</b>\n\n          <div>\n            <Text copyable>{pk}</Text>\n          </div>\n\n          <hr />\n\n          <i>\n            Point your camera phone at qr code to open in\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\n              burner wallet\n            </a>\n            :\n          </i>\n          <QR\n            value={\"https://xdai.io/\" + pk}\n            size=\"450\"\n            level=\"H\"\n            includeMargin\n            renderAs=\"svg\"\n            imageSettings={{ excavate: false }}\n          />\n\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\n            {\"https://xdai.io/\" + pk}\n          </Paragraph>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={[\n          privateKeyButton,\n          receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.signer || props.provider);\n\n              let value;\n              try {\n                value = ethers.utils.parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n","import { Button, Input, Tooltip } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/**\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n**/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  const { price, placeholder, localProvider, ensProvider } = props;\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (localProvider) {\n        const _faucetAddress = await localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n      }\n    };\n    getFaucetAddress();\n  }, [localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const updateAddress = newValue => {\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\n      setAddress(newValue);\n    }\n  };\n\n  const tx = Transactor(localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={placeholder ? placeholder : \"local faucet\"}\n        prefix={blockie}\n        value={address}\n        onChange={e => updateAddress(e.target.value)}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={localProvider}\n              ensProvider={ensProvider}\n              price={price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import { PageHeader } from \"antd\";\nimport React from \"react\";\n\n// displays a page header\n\nexport default function Header() {\n  return (\n    <a href=\"https://emojiverse.fun\">\n      <PageHeader\n        title=\"Emojiverse\"\n        className=\"header\"\n        ghost={false}\n        style={{ cursor: \"pointer\", backgroundColor: \"#9b5de5\" }}\n      />\n    </a>\n  );\n}\n","import {\n  Button,\n  Card,\n  Descriptions,\n  Divider,\n  Drawer,\n  InputNumber,\n  Modal,\n  notification,\n  Row,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\n\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst makeCall = async (callName, contract, args, metadata = {}) => {\n  if (contract[callName]) {\n    let result;\n    if (args) {\n      result = await contract[callName](...args, metadata);\n    } else {\n      result = await contract[callName]();\n    }\n    return result;\n  }\n  console.log(\"no call of that name!\");\n  return undefined;\n};\n\nconst defaultToken = \"ETH\";\nconst defaultTokenOut = \"DAI\";\nconst defaultSlippage = \"0.5\";\nconst defaultTimeLimit = 60 * 10;\n\nconst tokenListToObject = array =>\n  array.reduce((obj, item) => {\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\n    return obj;\n  }, {});\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n  const [tokenIn, setTokenIn] = useState(defaultToken);\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\n  const [exact, setExact] = useState();\n  const [amountIn, setAmountIn] = useState();\n  const [amountInMax, setAmountInMax] = useState();\n  const [amountOut, setAmountOut] = useState();\n  const [amountOutMin, setAmountOutMin] = useState();\n  const [trades, setTrades] = useState();\n  const [routerAllowance, setRouterAllowance] = useState();\n  const [balanceIn, setBalanceIn] = useState();\n  const [balanceOut, setBalanceOut] = useState();\n  const [slippageTolerance, setSlippageTolerance] = useState(\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\n  );\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\n  const [swapping, setSwapping] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [settingsVisible, setSettingsVisible] = useState(false);\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\n\n  const [tokenList, setTokenList] = useState([]);\n  const [tokens, setTokens] = useState();\n  const [invertPrice, setInvertPrice] = useState(false);\n\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\n\n  const signer = selectedProvider.getSigner();\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri);\n      try {\n        const tokenListResponse = await fetch(_tokenListUri);\n        const tokenListJson = await tokenListResponse.json();\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\n          return t.chainId === activeChainId;\n        });\n        const ethToken = WETH[activeChainId];\n        ethToken.name = \"Ethereum\";\n        ethToken.symbol = \"ETH\";\n        ethToken.logoURI =\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n        const _tokenList = [ethToken, ...filteredTokens];\n        setTokenList(_tokenList);\n        const _tokens = tokenListToObject(_tokenList);\n        setTokens(_tokens);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getTokenList();\n  }, [tokenListURI, _tokenListUri, activeChainId]);\n\n  const getTrades = async () => {\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\n\n      const baseTokens = tokenList\n        .filter(function (t) {\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\n        })\n        .map(el => {\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\n        });\n\n      const listOfPairwiseTokens = pairs(baseTokens);\n\n      const getPairs = async list => {\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n      };\n\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\n\n      let bestTrade;\n\n      if (exact === \"in\") {\n        setAmountInMax();\n        bestTrade = Trade.bestTradeExactIn(\n          listOfPairs.filter(item => item),\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n          tokens[tokenOut],\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\n        } else {\n          setAmountOut();\n        }\n      } else if (exact === \"out\") {\n        setAmountOutMin();\n        bestTrade = Trade.bestTradeExactOut(\n          listOfPairs.filter(item => item),\n          tokens[tokenIn],\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\n        } else {\n          setAmountIn();\n        }\n      }\n\n      setTrades(bestTrade);\n\n      console.log(bestTrade);\n    }\n  };\n\n  useEffect(() => {\n    getTrades();\n    // eslint-disable-next-line\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\n\n  useEffect(() => {\n    if (trades && trades[0]) {\n      if (exact === \"in\") {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\n      } else if (exact === \"out\") {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades, exact]);\n\n  const getBalance = async (_token, _account, _contract) => {\n    let newBalance;\n    if (_token === \"ETH\") {\n      newBalance = await selectedProvider.getBalance(_account);\n    } else {\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\n    }\n    return newBalance;\n  };\n\n  const getAccountInfo = async () => {\n    if (tokens) {\n      const accountList = await selectedProvider.listAccounts();\n\n      if (tokenIn) {\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\n        setBalanceIn(newBalanceIn);\n\n        let allowance;\n\n        if (tokenIn === \"ETH\") {\n          setRouterAllowance();\n        } else {\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\n          setRouterAllowance(allowance);\n        }\n      }\n\n      if (tokenOut) {\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\n        setBalanceOut(newBalanceOut);\n      }\n    }\n  };\n\n  usePoller(getAccountInfo, 6000);\n\n  const route = trades\n    ? trades.length > 0\n      ? trades[0].route.path.map(function (item) {\n          return item.symbol;\n        })\n      : []\n    : [];\n\n  const updateRouterAllowance = async newAllowance => {\n    setApproving(true);\n    try {\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\n      console.log(result);\n      setApproving(false);\n      return true;\n    } catch (e) {\n      notification.open({\n        message: \"Approval unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const approveRouter = async () => {\n    const approvalAmount =\n      exact === \"in\"\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        : amountInMax.raw.toString();\n    console.log(approvalAmount);\n    const approval = updateRouterAllowance(approvalAmount);\n    if (approval) {\n      notification.open({\n        message: \"Token transfer approved\",\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  };\n\n  const removeRouterAllowance = async () => {\n    const approvalAmount = ethers.utils.hexlify(0);\n    console.log(approvalAmount);\n    const removal = updateRouterAllowance(approvalAmount);\n    if (removal) {\n      notification.open({\n        message: \"Token approval removed\",\n        description: `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  };\n\n  const executeSwap = async () => {\n    setSwapping(true);\n    try {\n      let args;\n      const metadata = {};\n\n      let call;\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\n      const path = trades[0].route.path.map(function (item) {\n        return item.address;\n      });\n      console.log(path);\n      const accountList = await selectedProvider.listAccounts();\n      const address = accountList[0];\n\n      if (exact === \"in\") {\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapExactETHForTokens\";\n          args = [_amountOutMin, path, address, deadline];\n          metadata.value = _amountIn;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\n          args = [_amountIn, _amountOutMin, path, address, deadline];\n        }\n      } else if (exact === \"out\") {\n        const _amountOut = ethers.utils.hexlify(\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\n        );\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapETHForExactTokens\";\n          args = [_amountOut, path, address, deadline];\n          metadata.value = _amountInMax;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\n          args = [_amountOut, _amountInMax, path, address, deadline];\n        }\n      }\n      console.log(call, args, metadata);\n      const result = await makeCall(call, routerContract, args, metadata);\n      console.log(result);\n      notification.open({\n        message: \"Swap complete 🦄\",\n        description: (\n          <>\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\n            <Text copyable>{result.hash}</Text>\n          </>\n        ),\n      });\n      setSwapping(false);\n    } catch (e) {\n      console.log(e);\n      setSwapping(false);\n      notification.open({\n        message: \"Swap unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap();\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  const insufficientBalance = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const inputIsToken = tokenIn !== \"ETH\";\n  const insufficientAllowance = !inputIsToken\n    ? false\n    : routerAllowance\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const formattedBalanceIn = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\n    : null;\n  const formattedBalanceOut = balanceOut\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\n    : null;\n\n  const metaIn =\n    tokens && tokenList && tokenIn\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenIn].address;\n        })[0]\n      : null;\n  const metaOut =\n    tokens && tokenList && tokenOut\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenOut].address;\n        })[0]\n      : null;\n\n  const cleanIpfsURI = uri => {\n    try {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } catch (e) {\n      console.log(e, uri);\n      return uri;\n    }\n  };\n\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\n\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\n  const priceDescription = rawPrice\n    ? invertPrice\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\n      : `${price} ${tokenOut} per ${tokenIn}`\n    : null;\n\n  const priceWidget = (\n    <Space>\n      <Text type=\"secondary\">{priceDescription}</Text>\n      <Button\n        type=\"text\"\n        onClick={() => {\n          setInvertPrice(!invertPrice);\n        }}\n      >\n        <RetweetOutlined />\n      </Button>\n    </Space>\n  );\n\n  const swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row>\n        <Space>\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\n          {amountIn}\n          {tokenIn}\n        </Space>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\n        <span>↓</span>\n      </Row>\n      <Row>\n        <Space>\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\n          {amountOut}\n          {tokenOut}\n        </Space>\n      </Row>\n      <Divider />\n      <Row>{priceWidget}</Row>\n      <Row>\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\n          ? exact === \"in\"\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\n                6,\n              )} ${tokenOut} or the transaction will revert.`\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\n                6,\n              )} ${tokenIn} or the transaction will revert.`\n          : null}\n      </Row>\n    </Modal>\n  );\n\n  return (\n    <Card\n      title={\n        <Space>\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\n          <Typography>Uniswapper</Typography>\n        </Space>\n      }\n      extra={\n        <Button\n          type=\"text\"\n          onClick={() => {\n            setSettingsVisible(true);\n          }}\n        >\n          <SettingOutlined />\n        </Button>\n      }\n    >\n      <Space direction=\"vertical\">\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    setAmountOut();\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\n                    setAmountOutMin();\n                    setAmountInMax();\n                    setExact(\"in\");\n                  }}\n                >\n                  {formattedBalanceIn}\n                </Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              min={0}\n              size=\"large\"\n              value={amountIn}\n              onChange={e => {\n                setAmountOut();\n                setTrades();\n                setAmountIn(e);\n                setExact(\"in\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenIn}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              defaultValue={defaultToken}\n              onChange={value => {\n                console.log(value);\n                if (value === tokenOut) {\n                  console.log(\"switch!\", tokenIn);\n                  setTokenOut(tokenIn);\n                  setAmountOut(amountIn);\n                  setBalanceOut(balanceIn);\n                }\n                setTokenIn(value);\n                setTrades();\n                setAmountIn();\n                setExact(\"out\");\n                setBalanceIn();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Tooltip title={route.join(\"->\")}>\n            <span>↓</span>\n          </Tooltip>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\n                <Button type=\"text\">{formattedBalanceOut}</Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              size=\"large\"\n              min={0}\n              value={amountOut}\n              onChange={e => {\n                setAmountOut(e);\n                setAmountIn();\n                setTrades();\n                setExact(\"out\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenOut}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              onChange={value => {\n                console.log(value, tokenIn, tokenOut);\n                if (value === tokenIn) {\n                  console.log(\"switch!\", tokenOut);\n                  setTokenIn(tokenOut);\n                  setAmountIn(amountOut);\n                  setBalanceIn(balanceOut);\n                }\n                setTokenOut(value);\n                setExact(\"in\");\n                setAmountOut();\n                setTrades();\n                setBalanceOut();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          {priceDescription ? priceWidget : null}\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Space>\n            {inputIsToken ? (\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\n              </Button>\n            ) : null}\n            <Button\n              size=\"large\"\n              loading={swapping}\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\n              onClick={showSwapModal}\n            >\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\n            </Button>\n            {swapModal}\n          </Space>\n        </Row>\n      </Space>\n      <Drawer\n        visible={settingsVisible}\n        onClose={() => {\n          setSettingsVisible(false);\n        }}\n        width={500}\n      >\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n          <Descriptions.Item label=\"routerAllowance\">\n            <Space>\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\n            </Space>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n          <Descriptions.Item label=\"bestPrice\">\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"nextMidPrice\">\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"priceImpact\">\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"slippageTolerance\">\n            <InputNumber\n              defaultValue={defaultSlippage}\n              min={0}\n              max={100}\n              precision={2}\n              formatter={value => `${value}%`}\n              parser={value => value.replace(\"%\", \"\")}\n              onChange={value => {\n                console.log(value);\n\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\n                setSlippageTolerance(slippagePercent);\n              }}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"timeLimitInSeconds\">\n            <InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={value => {\n                console.log(value);\n                setTimeLimit(value);\n              }}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </Drawer>\n    </Card>\n  );\n}\n\nexport default Swap;\n","import { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { utils, ethers } from \"ethers\";\nimport { useContractLoader, useOnBlock } from \"eth-hooks\";\n\nimport { NETWORKS } from \"../constants\";\nimport { Transactor } from \"../helpers\";\n\n/** \nThis is a component for bridging between L1 & L2\nCurrently it supports Testnet deposits for Arbitrum & Optimism\n\n __          _______ _____\n \\ \\        / /_   _|  __ \\\n  \\ \\  /\\  / /  | | | |__) |\n   \\ \\/  \\/ /   | | |  ___/\n    \\  /\\  /   _| |_| |\n     \\/  \\/   |_____|_|\n\n\n**/\n\nexport default function L2ArbitrumBridge({ address, userSigner }) {\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\n  const [L1Provider, setL1Provider] = useState(\"\");\n  const [L2Provider, setL2Provider] = useState(\"\");\n  const [rollup, setRollup] = useState(\"arbitrum\");\n  const [environment] = useState(\"test\");\n\n  const rollupConfig = {\n    arbitrum: {\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\n    },\n    optimism: {\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\n    },\n  };\n\n  const activeConfig = rollupConfig[rollup][environment];\n\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  const tx = Transactor(userSigner);\n\n  useEffect(() => {\n    async function setProviders() {\n      const L1 = activeConfig.L1;\n      const L2 = activeConfig.L2;\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\n      setL1EthBalance(\"...\");\n      setL2EthBalance(\"...\");\n    }\n    setProviders();\n  }, [rollup, activeConfig.L1, activeConfig.L2]);\n\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\n\n  useOnBlock(L1Provider, async () => {\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\n    const yourL1Balance = await L1Provider.getBalance(address);\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\n    const yourL2Balance = await L2Provider.getBalance(address);\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\n  });\n\n  const { Option } = Select;\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 12 },\n    },\n  };\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 12,\n        offset: 8,\n      },\n    },\n  };\n\n  const columns = [\n    {\n      title: \"\",\n      dataIndex: \"token\",\n      key: \"token\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} L1 Balance`,\n      dataIndex: \"l1\",\n      key: \"l1\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\n      dataIndex: \"l2\",\n      key: \"l2\",\n      align: \"center\",\n    },\n  ];\n\n  const data = [\n    {\n      key: \"1\",\n      token: \"ETH\",\n      l1: \"Ξ\" + L1EthBalance,\n      l2: \"Ξ\" + L2EthBalance,\n    },\n  ];\n\n  const [form] = Form.useForm();\n\n  const onAssetChange = value => {\n    console.log(value);\n  };\n\n  async function onFinish(values) {\n    console.log(contracts);\n    console.log(values.amount.toString());\n    console.log(rollup);\n    let newTx;\n    try {\n      if (rollup === \"arbitrum\") {\n        newTx = await tx(\n          contracts.Inbox.depositEth(1_300_000, {\n            value: utils.parseEther(values.amount.toString()),\n            gasLimit: 300000,\n          }),\n        );\n      } else if (rollup === \"optimism\") {\n        newTx = await tx(\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\n            value: utils.parseEther(values.amount.toString()),\n          }),\n        );\n      }\n      await newTx.wait();\n      console.log(\"woop!\");\n    } catch (e) {\n      console.log(e);\n      console.log(\"something went wrong!\");\n    }\n  }\n\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\n\n  return (\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\n        <Radio.Group\n          value={rollup}\n          onChange={e => {\n            setRollup(e.target.value);\n          }}\n          style={{ marginBottom: 10 }}\n        >\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\n        </Radio.Group>\n\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\n\n        <Form\n          {...formItemLayout}\n          form={form}\n          name=\"control-hooks\"\n          onFinish={onFinish}\n          initialValues={{ assetType: \"eth\" }}\n        >\n          <Form.Item\n            name=\"assetType\"\n            label=\"Select Asset Type\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\n              <Option value=\"eth\">ETH</Option>\n              <Option disabled value=\"erc20\">\n                ERC-20\n              </Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"address\" label=\"Address\">\n            <Input disabled placeholder={address} />\n          </Form.Item>\n          <Form.Item\n            name=\"amount\"\n            label=\"Amount to bridge\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\nconst ArbitrumInboxABI = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"InboxMessageDelivered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\n    name: \"InboxMessageDeliveredFromOrigin\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"WhitelistSourceUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"bridge\",\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"createRetryableTicket\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\n    name: \"depositEth\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isMaster\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2Message\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2MessageFromOrigin\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"updateWhitelistSource\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"whitelist\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\nconst OVM_L1StandardBridgeABI = [\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\n];\n\nconst L1BridgeMetadata = {\n  // Arbitrium Contract's\n  44010: {\n    contracts: {\n      Inbox: {\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  4: {\n    contracts: {\n      Inbox: {\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  // Optimism Contract's\n  31337: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n  42: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n};\n","import { Alert, Button } from \"antd\";\nimport React from \"react\";\n\nimport { NETWORK } from \"../constants\";\n\nfunction NetworkDisplay({\n  NETWORKCHECK,\n  localChainId,\n  selectedChainId,\n  targetNetwork,\n  USE_NETWORK_SELECTOR,\n  logoutOfWeb3Modal,\n}) {\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n\n                    let switchTx;\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\n                    try {\n                      switchTx = await ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [{ chainId: data[0].chainId }],\n                      });\n                    } catch (switchError) {\n                      // not checking specific error code, because maybe we're not using MetaMask\n                      try {\n                        switchTx = await ethereum.request({\n                          method: \"wallet_addEthereumChain\",\n                          params: data,\n                        });\n                      } catch (addError) {\n                        // handle \"add\" error\n                      }\n                    }\n\n                    if (switchTx) {\n                      console.log(switchTx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = USE_NETWORK_SELECTOR ? null : (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n  console.log({ networkDisplay });\n\n  return networkDisplay;\n}\n\nexport default NetworkDisplay;\n","import { Button } from \"antd\";\nimport React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useBalance, useGasPrice } from \"eth-hooks\";\n\nimport { Transactor } from \"../helpers\";\n\nfunction FaucetHint({ localProvider, targetNetwork, address }) {\n  const [faucetClicked, setFaucetClicked] = useState(false);\n\n  // fetch local balance\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // get gas Price from network\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(localProvider, gasPrice);\n\n  let faucetHint = \"\";\n\n  if (\n    !faucetClicked &&\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId === 31337 &&\n    yourLocalBalance &&\n    ethers.utils.formatEther(yourLocalBalance) <= 0\n  ) {\n    faucetHint = (\n      <div style={{ padding: 16, display: \"inline-flex\" }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: ethers.utils.parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          💰 Grab funds from the faucet ⛽️\n        </Button>\n      </div>\n    );\n  }\n\n  return faucetHint;\n}\n\nexport default FaucetHint;\n","import React from \"react\";\nimport { Dropdown, Menu, Button } from \"antd\";\n\nfunction NetworkSwitch({ networkOptions, selectedNetwork, setSelectedNetwork }) {\n  const menu = (\n    <Menu>\n      {networkOptions\n        .filter(i => i !== selectedNetwork)\n        .map(i => (\n          <Menu.Item key={i}>\n            <Button type=\"text\" onClick={() => setSelectedNetwork(i)}>\n              <span style={{ textTransform: \"capitalize\" }}>{i}</span>\n            </Button>\n          </Menu.Item>\n        ))}\n    </Menu>\n  );\n\n  return (\n    <div>\n      <Dropdown.Button overlay={menu} placement=\"bottomRight\" trigger={[\"click\"]}>\n        <span style={{ textTransform: \"capitalize\" }}>{selectedNetwork}</span>\n      </Dropdown.Button>\n    </div>\n  );\n}\n\nexport default NetworkSwitch;\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n      var options = null;\n      var notify = null;\n      options = {\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n        system: \"ethereum\",\n        networkId: network.chainId,\n        // darkMode: Boolean, // (default: false)\n        transactionHandler: txInformation => {\n          if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n          const possibleFunction = callbacks[txInformation.transaction.hash];\n          if (typeof possibleFunction === \"function\") {\n            possibleFunction(txInformation.transaction);\n          }\n        },\n      };\n\n      notify = Notify(options);\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message =\n          e.data && e.data.message\n            ? e.data.message\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\n            : e.data\n            ? e.data\n            : JSON.stringify(e);\n        if (!e.error && e.message) {\n          message = e.message;\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try {\n          let obj = JSON.parse(message);\n          if (obj && obj.body) {\n            let errorObj = JSON.parse(obj.body);\n            if (errorObj && errorObj.error && errorObj.error.message) {\n              message = errorObj.error.message;\n            }\n          }\n        } catch (e) {\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","import Portis from \"@portis/web3\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Authereum from \"authereum\";\nimport Fortmatic from \"fortmatic\";\nimport WalletLink from \"walletlink\";\nimport Web3Modal from \"web3modal\";\nimport { ALCHEMY_KEY, INFURA_ID } from \"../constants\";\n\n// Coinbase walletLink init\nconst walletLink = new WalletLink({\n  appName: \"coinbase\",\n});\n\n// WalletLink provider\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, 1);\n\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\n/**\n  Web3 modal helps us \"connect\" external wallets:\n**/\nconst web3ModalSetup = () =>\n  new Web3Modal({\n    network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\n    cacheProvider: true, // optional\n    theme: \"light\", // optional. Change to \"dark\" for a dark theme.\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider, // required\n        options: {\n          bridge: \"https://polygon.bridge.walletconnect.org\",\n          infuraId: INFURA_ID,\n          rpc: {\n            10: \"https://mainnet.optimism.io\", // xDai\n            100: \"https://rpc.gnosischain.com\", // xDai\n            137: \"https://polygon-rpc.com\",\n            31337: \"http://localhost:8545\",\n            42161: \"https://arb1.arbitrum.io/rpc\",\n            80001: \"https://rpc-mumbai.maticvigil.com\",\n          },\n        },\n      },\n      portis: {\n        display: {\n          logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\n          name: \"Portis\",\n          description: \"Connect to Portis App\",\n        },\n        package: Portis,\n        options: {\n          id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\n        },\n      },\n      fortmatic: {\n        package: Fortmatic, // required\n        options: {\n          key: \"pk_live_5A7C91B2FC585A17\", // required\n        },\n      },\n      // torus: {\n      //   package: Torus,\n      //   options: {\n      //     networkParams: {\n      //       host: \"https://localhost:8545\", // optional\n      //       chainId: 1337, // optional\n      //       networkId: 1337 // optional\n      //     },\n      //     config: {\n      //       buildEnv: \"development\" // optional\n      //     },\n      //   },\n      // },\n      \"custom-walletlink\": {\n        display: {\n          logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\n          name: \"Coinbase\",\n          description: \"Connect to Coinbase Wallet (not Coinbase App)\",\n        },\n        package: walletLinkProvider,\n        connector: async (provider, _options) => {\n          await provider.enable();\n          return provider;\n        },\n      },\n      authereum: {\n        package: Authereum, // required\n      },\n    },\n  });\n\nexport default web3ModalSetup;\n","import { create } from \"ipfs-http-client\";\nimport { BufferList } from \"bl\";\nexport const ipfs = create({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\n\nexport async function addToIPFS(file) {\n  const fileAdded = await ipfs.add(file);\n\n  return fileAdded;\n}\n\nexport function urlFromCID(cid) {\n  return `https://ipfs.infura.io/ipfs/${cid}`;\n}\n\nexport async function getFromIPFS(hashToGet) {\n  for await (const file of ipfs.cat(hashToGet)) {\n    const content = new BufferList(file).toString();\n\n    return content;\n  }\n}\n","import React from \"react\";\nimport { Collapse } from \"antd\";\n\nconst { Panel } = Collapse;\n\nfunction callback(key) {\n  console.log(key);\n}\n\nconst FAQ = () => {\n  return (\n    <div style={{ margin: \"0 !important\", padding: \"1em 1em 4em 1em\", backgroundColor: \"#00F5D4\" }}>\n      <h3 className=\"h3-playful\">FAQ</h3>\n      <Collapse defaultActiveKey={[\"1\"]} onChange={callback} style={{ maxWidth: \"900px\", margin: \"0 auto\" }}>\n        <Panel header=\"Summary\" style={{ fontWeight: 700, textAlign: \"left\", backgroundColor: \"#FEE440\" }} key=\"1\">\n          <p style={{ fontWeight: 400 }}>\n            Create your own NFT, with emoji-based messages. You have a set of messages to choose from and you can add\n            one emoji to each one you choose. You can choose from 1 to 4 messages. Each message has a random background\n            color and the emoji is rotated by a random number of degrees. Everything is kept fully on-chain. It will\n            live as long as Ethereum.\n          </p>\n        </Panel>\n        <Panel\n          header=\"What does fully on-chain mean?\"\n          style={{ textAlign: \"left\", backgroundColor: \"#FEE440\" }}\n          key=\"2\"\n        >\n          <p>\n            Many NFT projects aren't fully on-chain. For example, they will keep record of your token's mint, transfers\n            and ownership on-chain, but the art will be kept on some server, controlled by somebody else, who can\n            theoretically change or even delete it. Emojiverse is fully on-chain. All the art is generated as SVG and\n            kept on Ethereum blockchain, not on any third party server. Your NFT will exist, unchanged, as long as\n            Ethereum exists.\n          </p>\n        </Panel>\n        <Panel header=\"Can I buy Emojiverse NFT?\" style={{ textAlign: \"left\", backgroundColor: \"#FEE440\" }} key=\"3\">\n          <p>\n            This is a learning, hobby project for me. I don't intend to start selling NFTs. You can \"pretend buy\" on\n            Rinkeby test network, with \"pretend ETH\". You'll own it but won't have to pay for it. Great, isn't it?\n          </p>\n        </Panel>\n        <Panel header=\"How to get ETH on Rinkeby?\" style={{ textAlign: \"left\", backgroundColor: \"#FEE440\" }} key=\"4\">\n          <p>\n            If you want to get the \"pretend ETH\" so that you can create and \"pretend buy\" your NFT, you can request test\n            ETH on Rinkeby network here:{\" \"}\n            <a target=\"_blank\" href=\"https://www.rinkebyfaucet.com/\" style={{ fontWeight: 700 }}>\n              Rinkeby Faucet by Alchemy\n            </a>\n          </p>\n        </Panel>\n        <Panel\n          header=\"How many Emojiverse NFTs can be minted?\"\n          style={{ textAlign: \"left\", backgroundColor: \"#FEE440\" }}\n          key=\"5\"\n        >\n          <p>There is no limit. No 1k, 2k or 10k total. Mint however many you want. It's all play anyway.</p>\n        </Panel>\n        <Panel\n          header=\"Will Emojiverse be available on Ethereum mainnet?\"\n          style={{ textAlign: \"left\", backgroundColor: \"#FEE440\" }}\n          key=\"6\"\n        >\n          <p>I don't have such plans at the moment. But, you never know...</p>\n        </Panel>\n        <Panel header=\"Who is behind Emojiverse?\" style={{ textAlign: \"left\", backgroundColor: \"#FEE440\" }} key=\"7\">\n          <p>\n            Me,{\" \"}\n            <a target=\"_blank\" href=\"https://velvetshark.com/\" style={{ fontWeight: 700 }}>\n              Radek Sienkiewicz\n            </a>\n            . Conversion optimization / UX consultant, transitioning into web3 and loving it.\n            <br />\n            Twitter:{\" \"}\n            <a target=\"_blank\" href=\"https://twitter.com/sabon23\" style={{ fontWeight: 700 }}>\n              @sabon23\n            </a>\n          </p>\n        </Panel>\n      </Collapse>\n    </div>\n  );\n};\n\nexport default FAQ;\n","import React from \"react\";\n\nconst Copyright = () => {\n  return (\n    <div style={{ margin: \"0 !important\", padding: \"10px\", backgroundColor: \"#9B5DE5\" }}>\n      <div style={{ marginTop: \"25px\", marginBottom: \"25px\", color: \"#fff\", textAlign: \"center\", fontWeight: 200 }}>\n        Built by 🦈 &nbsp;&nbsp;\n        <a\n          target=\"_blank\"\n          href=\"https://velvetshark.com/\"\n          rel=\"noreferrer\"\n          style={{ color: \"#fff\", textDecoration: \"underline\", fontWeight: 200 }}\n        >\n          VelvetShark.com\n        </a>\n        {\", \"}\n        {new Date().getFullYear()}\n        {\".\"}\n      </div>\n    </div>\n  );\n};\n\nexport default Copyright;\n","import { useState } from \"react\";\nimport { useContractReader } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Layout } from \"antd\";\nimport { Button } from \"antd\";\nimport { WalletOutlined } from \"@ant-design/icons\";\nimport Emojiform from \"../components/Emojiform\";\nimport TotalSupply from \"../components/TotalSupply\";\nimport Emojiboards from \"../components/Emojiboards\";\nimport FAQ from \"../components/FAQ\";\nimport Copyright from \"../components/Copyright\";\n\n/**\n * web3 props can be passed from '../App.jsx' into your local view component for use\n * @param {*} yourLocalBalance balance on current network\n * @param {*} readContracts contracts from current chain already pre-loaded using ethers contract module. More here https://docs.ethers.io/v5/api/contract/contract/\n * @returns react component\n **/\nfunction Home({ yourLocalBalance, readContracts, address, loadWeb3Modal }) {\n  // you can also use hooks locally in your component of choice\n  // in this case, let's keep track of 'purpose' variable from our contract\n  // const purpose = useContractReader(readContracts, \"Emojiverse\", \"purpose\");\n  // const [currentAccount, setCurrentAccount] = useState(address);\n\n  const { Content } = Layout;\n\n  return (\n    <>\n      <Layout>\n        <Content\n          style={{ backgroundColor: \"rgb(254, 228, 64)\", width: \"100%\", display: \"block\", paddingBottom: \"40px\" }}\n        >\n          {/* Logged in? Show the form to create an Emojiboard */}\n          {address ? (\n            <>\n              <h3\n                className=\"h3-playful\"\n                style={{\n                  marginTop: \"15px\",\n                  marginBottom: \"0px\",\n                  lineHeight: 0.8,\n                  textShadow: \"-0.04em 0.04em 0 #00BBF9\",\n                  fontWeight: 700,\n                  padding: \"0.4em 0.6em\",\n                }}\n              >\n                Express yourself, one emoji at a time.\n              </h3>\n              Choose from 1 to 4 message types, add emoji to each, and put it on the blockchain forever. Then show it to\n              the world!\n              <Emojiform />\n            </>\n          ) : (\n            // Not logged in? Show the hero area and the login button\n            <>\n              <h1 className=\"big-title\">Emojiverse</h1>\n              <h3 style={{ marginTop: 0, marginBottom: 0, fontWeight: 700, fontSize: \"1.5rem\" }}>\n                Express yourself, one emoji at a time.\n              </h3>\n              <div\n                style={{\n                  maxWidth: \"600px\",\n                  margin: \"0 auto\",\n                  paddingLeft: \"24px\",\n                  paddingRight: \"24px\",\n                  paddingBottom: \"16px\",\n                  paddingTop: \"16px\",\n                  textAlign: \"left\",\n                  fontSize: \"1rem\",\n                }}\n              >\n                <p>Say what you want to say, with emoji.</p>\n                <p>Create from 1 to 4 messages on your Emojiboard, and show with emoji:</p>\n                <ul>\n                  <li>Who you are...</li>\n                  <li>How you feel...</li>\n                  <li>Your message to the world (it can only be \"gm\" 😎 )</li>\n                  <li>What you like...</li>\n                  <li>What you believe in...</li>\n                  <li>and more...</li>\n                </ul>\n              </div>\n              <TotalSupply />\n              <Button\n                type=\"primary\"\n                key=\"loginbutton\"\n                style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4, backgroundColor: \"#9b5de5\", color: \"#fff\" }}\n                shape=\"round\"\n                icon={<WalletOutlined />}\n                size=\"large\"\n                /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\n                onClick={loadWeb3Modal}\n              >\n                Connect wallet\n              </Button>\n            </>\n          )}\n        </Content>\n        <Content>\n          <Emojiboards address={address} />\n          <FAQ />\n          <Copyright />\n        </Content>\n      </Layout>\n    </>\n  );\n}\n\nexport default Home;\n","import { Button, Card, DatePicker, Divider, Input, Progress, Slider, Spin, Switch } from \"antd\";\nimport React, { useState } from \"react\";\nimport { utils } from \"ethers\";\nimport { SyncOutlined } from \"@ant-design/icons\";\n\nimport { Address, Balance, Events } from \"../components\";\n\nexport default function ExampleUI({\n  purpose,\n  address,\n  mainnetProvider,\n  localProvider,\n  yourLocalBalance,\n  price,\n  tx,\n  readContracts,\n  writeContracts,\n}) {\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n\n  return (\n    <div>\n      {/*\n        ⚙️ Here is an example UI that displays and sets the purpose in your smart contract:\n      */}\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 400, margin: \"auto\", marginTop: 64 }}>\n        <h2>Example UI:</h2>\n        <h4>purpose: {purpose}</h4>\n        <Divider />\n        <div style={{ margin: 8 }}>\n          <Input\n            onChange={e => {\n              setNewPurpose(e.target.value);\n            }}\n          />\n          <Button\n            style={{ marginTop: 8 }}\n            onClick={async () => {\n              /* look how you call setPurpose on your contract: */\n              /* notice how you pass a call back for tx updates too */\n              const result = tx(writeContracts.YourContract.setPurpose(newPurpose), update => {\n                console.log(\"📡 Transaction Update:\", update);\n                if (update && (update.status === \"confirmed\" || update.status === 1)) {\n                  console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\n                  console.log(\n                    \" ⛽️ \" +\n                      update.gasUsed +\n                      \"/\" +\n                      (update.gasLimit || update.gas) +\n                      \" @ \" +\n                      parseFloat(update.gasPrice) / 1000000000 +\n                      \" gwei\",\n                  );\n                }\n              });\n              console.log(\"awaiting metamask/web3 confirm result...\", result);\n              console.log(await result);\n            }}\n          >\n            Set Purpose!\n          </Button>\n        </div>\n        <Divider />\n        Your Address:\n        <Address address={address} ensProvider={mainnetProvider} fontSize={16} />\n        <Divider />\n        ENS Address Example:\n        <Address\n          address=\"0x34aA3F359A9D614239015126635CE7732c18fDF3\" /* this will show as austingriffith.eth */\n          ensProvider={mainnetProvider}\n          fontSize={16}\n        />\n        <Divider />\n        {/* use utils.formatEther to display a BigNumber: */}\n        <h2>Your Balance: {yourLocalBalance ? utils.formatEther(yourLocalBalance) : \"...\"}</h2>\n        <div>OR</div>\n        <Balance address={address} provider={localProvider} price={price} />\n        <Divider />\n        <div>🐳 Example Whale Balance:</div>\n        <Balance balance={utils.parseEther(\"1000\")} provider={localProvider} price={price} />\n        <Divider />\n        {/* use utils.formatEther to display a BigNumber: */}\n        <h2>Your Balance: {yourLocalBalance ? utils.formatEther(yourLocalBalance) : \"...\"}</h2>\n        <Divider />\n        Your Contract Address:\n        <Address\n          address={readContracts && readContracts.YourContract ? readContracts.YourContract.address : null}\n          ensProvider={mainnetProvider}\n          fontSize={16}\n        />\n        <Divider />\n        <div style={{ margin: 8 }}>\n          <Button\n            onClick={() => {\n              /* look how you call setPurpose on your contract: */\n              tx(writeContracts.YourContract.setPurpose(\"🍻 Cheers\"));\n            }}\n          >\n            Set Purpose to &quot;🍻 Cheers&quot;\n          </Button>\n        </div>\n        <div style={{ margin: 8 }}>\n          <Button\n            onClick={() => {\n              /*\n              you can also just craft a transaction and send it to the tx() transactor\n              here we are sending value straight to the contract's address:\n            */\n              tx({\n                to: writeContracts.YourContract.address,\n                value: utils.parseEther(\"0.001\"),\n              });\n              /* this should throw an error about \"no fallback nor receive function\" until you add it */\n            }}\n          >\n            Send Value\n          </Button>\n        </div>\n        <div style={{ margin: 8 }}>\n          <Button\n            onClick={() => {\n              /* look how we call setPurpose AND send some value along */\n              tx(\n                writeContracts.YourContract.setPurpose(\"💵 Paying for this one!\", {\n                  value: utils.parseEther(\"0.001\"),\n                }),\n              );\n              /* this will fail until you make the setPurpose function payable */\n            }}\n          >\n            Set Purpose With Value\n          </Button>\n        </div>\n        <div style={{ margin: 8 }}>\n          <Button\n            onClick={() => {\n              /* you can also just craft a transaction and send it to the tx() transactor */\n              tx({\n                to: writeContracts.YourContract.address,\n                value: utils.parseEther(\"0.001\"),\n                data: writeContracts.YourContract.interface.encodeFunctionData(\"setPurpose(string)\", [\n                  \"🤓 Whoa so 1337!\",\n                ]),\n              });\n              /* this should throw an error about \"no fallback nor receive function\" until you add it */\n            }}\n          >\n            Another Example\n          </Button>\n        </div>\n      </div>\n\n      {/*\n        📑 Maybe display a list of events?\n          (uncomment the event and emit line in YourContract.sol! )\n      */}\n      <Events\n        contracts={readContracts}\n        contractName=\"YourContract\"\n        eventName=\"SetPurpose\"\n        localProvider={localProvider}\n        mainnetProvider={mainnetProvider}\n        startBlock={1}\n      />\n\n      <div style={{ width: 600, margin: \"auto\", marginTop: 32, paddingBottom: 256 }}>\n        <Card>\n          Check out all the{\" \"}\n          <a\n            href=\"https://github.com/austintgriffith/scaffold-eth/tree/master/packages/react-app/src/components\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            📦 components\n          </a>\n        </Card>\n\n        <Card style={{ marginTop: 32 }}>\n          <div>\n            There are tons of generic components included from{\" \"}\n            <a href=\"https://ant.design/components/overview/\" target=\"_blank\" rel=\"noopener noreferrer\">\n              🐜 ant.design\n            </a>{\" \"}\n            too!\n          </div>\n\n          <div style={{ marginTop: 8 }}>\n            <Button type=\"primary\">Buttons</Button>\n          </div>\n\n          <div style={{ marginTop: 8 }}>\n            <SyncOutlined spin /> Icons\n          </div>\n\n          <div style={{ marginTop: 8 }}>\n            Date Pickers?\n            <div style={{ marginTop: 2 }}>\n              <DatePicker onChange={() => {}} />\n            </div>\n          </div>\n\n          <div style={{ marginTop: 32 }}>\n            <Slider range defaultValue={[20, 50]} onChange={() => {}} />\n          </div>\n\n          <div style={{ marginTop: 32 }}>\n            <Switch defaultChecked onChange={() => {}} />\n          </div>\n\n          <div style={{ marginTop: 32 }}>\n            <Progress percent={50} status=\"active\" />\n          </div>\n\n          <div style={{ marginTop: 32 }}>\n            <Spin />\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","import { Select } from \"antd\";\nimport React, { useState } from \"react\";\nimport { utils } from \"ethers\";\n\nimport { useTokenList } from \"eth-hooks/dapps/dex\";\nimport { Address, AddressInput } from \"../components\";\n\nconst { Option } = Select;\n\nexport default function Hints({ yourLocalBalance, mainnetProvider, price, address }) {\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\n  const [selectedToken, setSelectedToken] = useState(\"Pick a token!\");\n  const listOfTokens = useTokenList(\n    \"https://raw.githubusercontent.com/SetProtocol/uniswap-tokenlist/main/set.tokenlist.json\",\n  );\n\n  return (\n    <div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>👷</span>\n        Edit your <b>contract</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/contracts\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🛰</span>\n        <b>compile/deploy</b> with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚀</span>\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/react-app/src/contracts/\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🎛</span>\n        Edit your <b>frontend</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/reactapp/src/App.js\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔭</span>\n        explore the\n        <span\n          className=\"highlight\"\n          style={{\n            marginLeft: 4,\n            marginRight: 4,\n            /* backgroundColor: \"#f9f9f9\", */\n            padding: 4,\n            borderRadius: 4,\n            fontWeight: \"bolder\",\n          }}\n        >\n          🖇 hooks\n        </span>\n        and\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          📦 components\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        for example, the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          useBalance()\n        </span>{\" \"}\n        hook keeps track of your balance: <b>{utils.formatEther(yourLocalBalance || 0)}</b>\n      </div>\n\n      <div style={{ margin: 8 }}>\n        <div>\n          <b>useTokenList()</b> can get you an array of tokens from{\" \"}\n          <a href=\"https://tokenlists.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            tokenlists.org!\n          </a>\n        </div>\n        <Select\n          showSearch\n          value={selectedToken}\n          onChange={value => {\n            console.log(`selected ${value}`);\n            setSelectedToken(value);\n          }}\n          filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n          optionFilterProp=\"children\"\n        >\n          {listOfTokens.map(token => (\n            <Option key={token.address + \"_\" + token.symbol} value={token.symbol}>\n              {token.symbol}\n            </Option>\n          ))}\n        </Select>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        as you build your app you&apos;ll need web3 specific components like an\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          {\"<AddressInput/>\"}\n        </span>\n        component:\n        <div style={{ width: 350, padding: 16, margin: \"auto\" }}>\n          <AddressInput ensProvider={mainnetProvider} />\n        </div>\n        <div>(try putting in your address, an ens address, or scanning a QR code)</div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        this balance could be multiplied by\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          price\n        </span>{\" \"}\n        that is loaded with the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          usePrice\n        </span>{\" \"}\n        hook with the current value: <b>${price}</b>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💧</span>\n        use the <b>faucet</b> to send funds to\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <Address address={address} minimized /> {address}\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        deploy to a testnet or mainnet by editing\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/hardhat.config.js\n        </span>\n        and running\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔑</span>\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run generate\n        </span>\n        will create a deployer account in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat\n        </span>\n        <div style={{ marginTop: 8 }}>\n          (use{\" \"}\n          <span\n            className=\"highlight\"\n            style={{\n              marginLeft: 4,\n              /* backgroundColor: \"#f1f1f1\", */ padding: 4,\n              borderRadius: 4,\n              fontWeight: \"bolder\",\n            }}\n          >\n            yarn run account\n          </span>{\" \"}\n          to display deployer address and balance)\n        </div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>⚙️</span>\n        build your app with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run build\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        ship it!\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run surge\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run s3\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run ipfs\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💬</span>\n        for support, join this\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\">\n            Telegram Chat\n          </a>\n        </span>\n      </div>\n      <div style={{ padding: 128 }}>\n        🛠 Check out your browser&apos;s developer console for more... (inspect console) 🚀\n      </div>\n    </div>\n  );\n}\n","import { gql, useQuery } from \"@apollo/client\";\nimport { Button, Input, Table, Typography } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport GraphiQL from \"graphiql\";\nimport \"graphiql/graphiql.min.css\";\nimport fetch from \"isomorphic-fetch\";\nimport React, { useState } from \"react\";\nimport { Address } from \"../components\";\n\nconst highlight = {\n  marginLeft: 4,\n  marginRight: 8,\n  /* backgroundColor: \"#f9f9f9\", */ padding: 4,\n  borderRadius: 4,\n  fontWeight: \"bolder\",\n};\n\nfunction Subgraph(props) {\n  function graphQLFetcher(graphQLParams) {\n    return fetch(props.subgraphUri, {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(graphQLParams),\n    }).then(response => response.json());\n  }\n\n  const EXAMPLE_GRAPHQL = `\n  {\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\n      id\n      purpose\n      createdAt\n      sender {\n        id\n      }\n    }\n    senders {\n      id\n      address\n      purposeCount\n    }\n  }\n  `;\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL);\n  const { loading, data } = useQuery(EXAMPLE_GQL, { pollInterval: 2500 });\n\n  const purposeColumns = [\n    {\n      title: \"Purpose\",\n      dataIndex: \"purpose\",\n      key: \"purpose\",\n    },\n    {\n      title: \"Sender\",\n      key: \"id\",\n      render: record => <Address value={record.sender.id} ensProvider={props.mainnetProvider} fontSize={16} />,\n    },\n    {\n      title: \"createdAt\",\n      key: \"createdAt\",\n      dataIndex: \"createdAt\",\n      render: d => new Date(d * 1000).toISOString(),\n    },\n  ];\n\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n\n  const deployWarning = (\n    <div style={{ marginTop: 8, padding: 8 }}>Warning: 🤔 Have you deployed your subgraph yet?</div>\n  );\n\n  return (\n    <>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        You will find that parsing/tracking events with the{\" \"}\n        <span className=\"highlight\" style={highlight}>\n          useEventListener\n        </span>{\" \"}\n        hook becomes a chore for every new project.\n      </div>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        Instead, you can use{\" \"}\n        <a href=\"https://thegraph.com/docs/about/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">\n          The Graph\n        </a>{\" \"}\n        with 🏗 scaffold-eth (\n        <a href=\"https://youtu.be/T5ylzOTkn-Q\" target=\"_blank\" rel=\"noopener noreferrer\">\n          learn more\n        </a>\n        ):\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚮</span>\n        Clean up previous data:\n        <span className=\"highlight\" style={highlight}>\n          yarn clean-graph-node\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        Spin up a local graph node by running\n        <span className=\"highlight\" style={highlight}>\n          yarn run-graph-node\n        </span>\n        <span style={{ marginLeft: 4 }}>\n          {\" \"}\n          (requires{\" \"}\n          <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">\n            {\" \"}\n            Docker\n          </a>\n          ){\" \"}\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📝</span>\n        Create your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-create-local\n        </span>\n        (only required once!)\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        Deploy your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-ship-local\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🖍️</span>\n        Edit your <b>local subgraph</b> in\n        <span className=\"highlight\" style={highlight}>\n          packages/subgraph/src\n        </span>\n        (learn more about subgraph definition{\" \"}\n        <a href=\"https://thegraph.com/docs/define-a-subgraph\" target=\"_blank\" rel=\"noopener noreferrer\">\n          here\n        </a>\n        )\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🤩</span>\n        Deploy your <b>contracts and your subgraph</b> in one go by running\n        <span className=\"highlight\" style={highlight}>\n          yarn deploy-and-graph\n        </span>\n      </div>\n\n      <div style={{ width: 780, margin: \"auto\", paddingBottom: 64 }}>\n        <div style={{ margin: 32, textAlign: \"right\" }}>\n          <Input\n            onChange={e => {\n              setNewPurpose(e.target.value);\n            }}\n          />\n          <Button\n            onClick={() => {\n              console.log(\"newPurpose\", newPurpose);\n              /* look how you call setPurpose on your contract: */\n              props.tx(props.writeContracts.YourContract.setPurpose(newPurpose));\n            }}\n          >\n            Set Purpose\n          </Button>\n        </div>\n\n        {data ? (\n          <Table dataSource={data.purposes} columns={purposeColumns} rowKey=\"id\" />\n        ) : (\n          <Typography>{loading ? \"Loading...\" : deployWarning}</Typography>\n        )}\n\n        <div style={{ margin: 32, height: 400, border: \"1px solid #888888\", textAlign: \"left\" }}>\n          <GraphiQL fetcher={graphQLFetcher} docExplorerOpen query={EXAMPLE_GRAPHQL} />\n        </div>\n      </div>\n\n      <div style={{ padding: 64 }}>...</div>\n    </>\n  );\n}\n\nexport default Subgraph;\n","import { Button, Col, Menu, Row } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useGasPrice,\n  useOnBlock,\n  useUserProviderAndSigner,\n} from \"eth-hooks\";\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Link, Route, Switch, useLocation } from \"react-router-dom\";\nimport \"./App.css\";\nimport { Account, Contract, Header, NetworkDisplay, NetworkSwitch } from \"./components\";\nimport { NETWORKS, ALCHEMY_KEY } from \"./constants\";\nimport externalContracts from \"./contracts/external_contracts\";\n// contracts\nimport deployedContracts from \"./contracts/hardhat_contracts.json\";\nimport { Transactor, Web3ModalSetup } from \"./helpers\";\nimport { Home, ExampleUI, Hints, Subgraph } from \"./views\";\nimport { useStaticJsonRPC } from \"./hooks\";\n\nconst { ethers } = require(\"ethers\");\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/scaffold-eth/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Alchemy.com & Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\nconst initialNetwork = NETWORKS.rinkeby; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = false; // <------- change to `true` to enable console logging in development\nconst NETWORKCHECK = true;\nconst USE_BURNER_WALLET = false; // toggle burner wallet feature\nconst USE_NETWORK_SELECTOR = false;\n\nconst web3Modal = Web3ModalSetup();\n\n// 🛰 providers\nconst providers = [\n  `https://eth-rinkeby.alchemyapi.io/v2/${ALCHEMY_KEY}`,\n  \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\n  `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\n  \"https://rpc.scaffoldeth.io:48544\",\n];\n\nfunction App(props) {\n  // specify all the chains your app is available on. Eg: ['localhost', 'mainnet', ...otherNetworks ]\n  // reference './constants.js' for other networks\n  const networkOptions = [initialNetwork.name, \"mainnet\", \"rinkeby\"];\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n  const [selectedNetwork, setSelectedNetwork] = useState(networkOptions[0]);\n  const location = useLocation();\n\n  const targetNetwork = NETWORKS[selectedNetwork];\n\n  // 🔭 block explorer URL\n  const blockExplorer = targetNetwork.blockExplorer;\n\n  // load all your providers\n  const localProvider = useStaticJsonRPC([\n    process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : targetNetwork.rpcUrl,\n  ]);\n  const mainnetProvider = useStaticJsonRPC(providers);\n\n  if (DEBUG) console.log(`Using ${selectedNetwork} network`);\n\n  // 🛰 providers\n  if (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider, USE_BURNER_WALLET);\n\n  const userSigner = userProviderAndSigner.signer;\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\n\n  // const contractConfig = useContractConfig();\n\n  const contractConfig = { deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {} };\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider, contractConfig);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\n\n  // If you want to call a function on a new block\n  useOnBlock(mainnetProvider, () => {\n    console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  });\n\n  // Then read your DAI balance like:\n  const myMainnetDAIBalance = useContractReader(mainnetContracts, \"DAI\", \"balanceOf\", [\n    \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\n  ]);\n\n  // keep track of a variable from the contract in the local React state:\n  const purpose = useContractReader(readContracts, \"Emojiverse\", \"purpose\");\n\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\n  */\n\n  //\n  // 🧫 DEBUG 👨🏻‍🔬\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      mainnetProvider &&\n      address &&\n      selectedChainId &&\n      yourLocalBalance &&\n      yourMainnetBalance &&\n      readContracts &&\n      writeContracts &&\n      mainnetContracts\n    ) {\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\n      console.log(\"🏠 localChainId\", localChainId);\n      console.log(\"👩‍💼 selected address:\", address);\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n      console.log(\"📝 readContracts\", readContracts);\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\n      console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\n      console.log(\"🔐 writeContracts\", writeContracts);\n    }\n  }, [\n    mainnetProvider,\n    address,\n    selectedChainId,\n    yourLocalBalance,\n    yourMainnetBalance,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n    localChainId,\n    myMainnetDAIBalance,\n  ]);\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n    // eslint-disable-next-line\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <NetworkDisplay\n        NETWORKCHECK={NETWORKCHECK}\n        localChainId={localChainId}\n        selectedChainId={selectedChainId}\n        targetNetwork={targetNetwork}\n        logoutOfWeb3Modal={logoutOfWeb3Modal}\n        USE_NETWORK_SELECTOR={USE_NETWORK_SELECTOR}\n      />\n\n      <Switch>\n        <Route exact path=\"/\">\n          {/* pass in any web3 props to this Home component. For example, yourLocalBalance */}\n          <Home\n            yourLocalBalance={yourLocalBalance}\n            readContracts={readContracts}\n            address={address}\n            loadWeb3Modal={loadWeb3Modal}\n          />\n        </Route>\n        <Route exact path=\"/debug\">\n          {/*\n                🎛 this scaffolding is full of commonly used components\n                this <Contract/> component will automatically parse your ABI\n                and give you a form to interact with it locally\n            */}\n\n          <Contract\n            name=\"Emojiverse\"\n            price={price}\n            signer={userSigner}\n            provider={localProvider}\n            address={address}\n            blockExplorer={blockExplorer}\n            contractConfig={contractConfig}\n          />\n        </Route>\n        <Route path=\"/hints\">\n          <Hints\n            address={address}\n            yourLocalBalance={yourLocalBalance}\n            mainnetProvider={mainnetProvider}\n            price={price}\n          />\n        </Route>\n        <Route path=\"/exampleui\">\n          <ExampleUI\n            address={address}\n            userSigner={userSigner}\n            mainnetProvider={mainnetProvider}\n            localProvider={localProvider}\n            yourLocalBalance={yourLocalBalance}\n            price={price}\n            tx={tx}\n            writeContracts={writeContracts}\n            readContracts={readContracts}\n            purpose={purpose}\n          />\n        </Route>\n        <Route path=\"/mainnetdai\">\n          <Contract\n            name=\"DAI\"\n            customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.DAI}\n            signer={userSigner}\n            provider={mainnetProvider}\n            address={address}\n            blockExplorer=\"https://etherscan.io/\"\n            contractConfig={contractConfig}\n            chainId={1}\n          />\n          {/*\n            <Contract\n              name=\"UNI\"\n              customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.UNI}\n              signer={userSigner}\n              provider={mainnetProvider}\n              address={address}\n              blockExplorer=\"https://etherscan.io/\"\n            />\n            */}\n        </Route>\n        <Route path=\"/subgraph\">\n          <Subgraph\n            subgraphUri={props.subgraphUri}\n            tx={tx}\n            writeContracts={writeContracts}\n            mainnetProvider={mainnetProvider}\n          />\n        </Route>\n      </Switch>\n\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\n        <div style={{ display: \"flex\", flex: 1, alignItems: \"center\" }}>\n          {USE_NETWORK_SELECTOR && (\n            <div style={{ marginRight: 20 }}>\n              <NetworkSwitch\n                networkOptions={networkOptions}\n                selectedNetwork={selectedNetwork}\n                setSelectedNetwork={setSelectedNetwork}\n              />\n            </div>\n          )}\n          <Account\n            useBurner={false}\n            address={address}\n            localProvider={localProvider}\n            userSigner={userSigner}\n            mainnetProvider={mainnetProvider}\n            price={price}\n            web3Modal={web3Modal}\n            loadWeb3Modal={loadWeb3Modal}\n            logoutOfWeb3Modal={logoutOfWeb3Modal}\n            blockExplorer={blockExplorer}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\n      <BrowserRouter>\n        <App subgraphUri={subgraphUri} />\n      </BrowserRouter>\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n","import { useEffect, useState } from \"react\";\n\nexport default function useDebounce(value, delay) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","import { useCallback, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nconst createProvider = async url => {\n  const p = new ethers.providers.StaticJsonRpcProvider(url);\n\n  await p.ready;\n\n  return p;\n};\n\nexport default function useStaticJsonRPC(urlArray) {\n  const [provider, setProvider] = useState(null);\n\n  const handleProviders = useCallback(async () => {\n    try {\n      const p = await Promise.race(urlArray.map(createProvider));\n      const _p = await p;\n\n      setProvider(_p);\n    } catch (error) {\n      // todo: show notification error about provider issues\n      console.log(error);\n    }\n  }, [urlArray]);\n\n  useEffect(() => {\n    handleProviders();\n    // eslint-disable-next-line\n  }, [JSON.stringify(urlArray)]);\n\n  return provider;\n}\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\n// @ts-ignore\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\n\nexport const loadAppContracts = async () => {\n  const config = {};\n  config.deployedContracts = (await contractListPromise).default ?? {};\n  config.externalContracts = (await externalContractsPromise).default ?? {};\n  return config;\n};\n","const ERC20ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\nconst DAIABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"chainId_\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: true,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes4\",\n        name: \"sig\",\n        type: \"bytes4\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg1\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg2\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"LogNote\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"PERMIT_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"deny\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"move\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"holder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"allowed\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"pull\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"push\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"rely\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"wards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\nmodule.exports = {\n  1: {\n    contracts: {\n      DAI: {\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        abi: DAIABI,\n      },\n      UNI: {\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n        abi: ERC20ABI,\n      },\n    },\n  },\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Button } from \"antd\";\n\nconst MORALIS_API_KEY = process.env.REACT_APP_MORALIS_API_KEY;\nconst OPENSEA_CONTRACT_ADDRESS = process.env.REACT_APP_OPENSEA_CONTRACT_ADDRESS;\nconst REACT_APP_OPENSEA_COLLECTION_URL = process.env.REACT_APP_OPENSEA_COLLECTION_URL;\n\nexport default function TotalSupply() {\n  const [totalSupply, setTotalSupply] = useState([]);\n\n  // Get the last 5 emojiboards\n  useEffect(() => {\n    (async function () {\n      try {\n        // Get the last 5 emojiboards using Moralis API\n        const response = await fetch(\n          `https://deep-index.moralis.io/api/v2/nft/${OPENSEA_CONTRACT_ADDRESS}?chain=rinkeby&format=decimal&limit=1`,\n          {\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Accept: \"application/json\",\n              \"X-API-Key\": MORALIS_API_KEY,\n            },\n          },\n        );\n        const json = await response.json();\n\n        // For each emojiboard, get the id and token_uri and set them as a pair in the emojiboards array\n        setTotalSupply(json.total);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        maxWidth: \"500px\",\n        margin: \"0 auto 24px auto\",\n        padding: \"4px\",\n        boxSizing: \"border-box\",\n        lineHeight: \"3rem\",\n        textAlign: \"center\",\n        verticalAlign: \"middle\",\n        fontSize: \"1rem\",\n        fontWeight: 700,\n        color: \"#fff\",\n        display: \"block\",\n        borderRadius: \"8px\",\n        background: \"rgb(155, 93, 230)\",\n        background: \"linear-gradient(90deg, rgba(155,93,230,1) 0%, rgba(241,91,181,1) 100%)\",\n      }}\n    >\n      Emojiboards created so far: {totalSupply}\n      <Button\n        type=\"primary\"\n        key=\"loginbutton\"\n        style={{\n          display: \"inline-flex\",\n          verticalAlign: \"top\",\n          marginTop: 4,\n          marginLeft: \"10px\",\n          backgroundColor: \"#1e81e3\",\n          color: \"#fff\",\n          fontWeight: 700,\n          border: \"1px solid #fff\",\n          padding: \"6px 16px\",\n          borderRadius: \"30px\",\n        }}\n        shape=\"round\"\n        size=\"large\"\n        href={REACT_APP_OPENSEA_COLLECTION_URL}\n        target={\"_blank\"}\n      >\n        OpenSea\n      </Button>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Image } from \"antd\";\nimport TotalSupply from \"./TotalSupply\";\n\nconst MORALIS_API_KEY = process.env.REACT_APP_MORALIS_API_KEY;\nconst OPENSEA_CONTRACT_ADDRESS = process.env.REACT_APP_OPENSEA_CONTRACT_ADDRESS;\n\nexport default function Emojiboards(props) {\n  // A state variable to store created Emojiboards\n  const [emojiboards, setEmojiboards] = useState([]);\n  const [userEmojiboards, setUserEmojiboards] = useState([]);\n\n  const address = props.address;\n\n  function extractImage(uri) {\n    // Starting with character 30 because each uri start with this: \"data:application/json;base64,\"\n    return uri ? JSON.parse(Buffer.from(uri.substring(29), \"base64\")).image : \"\";\n  }\n\n  // Get the last 5 emojiboards\n  useEffect(() => {\n    (async function () {\n      try {\n        // Get the last 5 emojiboards using Moralis API\n        const response = await fetch(\n          `https://deep-index.moralis.io/api/v2/nft/${OPENSEA_CONTRACT_ADDRESS}?chain=rinkeby&format=decimal&limit=8`,\n          {\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Accept: \"application/json\",\n              \"X-API-Key\": MORALIS_API_KEY,\n            },\n          },\n        );\n        const json = await response.json();\n        // For each emojiboard, get the id and token_uri and set them as a pair in the emojiboards array\n        setEmojiboards(json.result.map(emojiboard => [emojiboard.token_id, emojiboard.token_uri]));\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  // Get current user's emojiboards\n  useEffect(() => {\n    (async function () {\n      try {\n        // Get user's emojiboards using Moralis API\n        const response = await fetch(\n          `https://deep-index.moralis.io/api/v2/${address}/nft/${OPENSEA_CONTRACT_ADDRESS}?chain=rinkeby&format=decimal&limit=100`,\n          {\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Accept: \"application/json\",\n              \"X-API-Key\": MORALIS_API_KEY,\n            },\n          },\n        );\n        const json = await response.json();\n        // Sort the user's emojiboards by id, descending\n        json.result.sort((a, b) => b.token_id - a.token_id);\n        // For each emojiboard, get the id and token_uri and set them as a pair in the emojiboards array\n        setUserEmojiboards(json.result.map(emojiboard => [emojiboard.token_id, emojiboard.token_uri]));\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [address]);\n\n  return (\n    <>\n      {userEmojiboards.length > 0 && (\n        <div style={{ backgroundColor: \"#00F5D4\", padding: \"15px\" }}>\n          <h3\n            className=\"h3-playful\"\n            style={{\n              lineHeight: 0.8,\n              textShadow: \"-0.04em 0.04em 0 #ffffff\",\n              fontWeight: 700,\n              padding: \"0.4em 0.6em\",\n            }}\n          >\n            Your Emojiboards ({userEmojiboards.length})\n          </h3>\n          <Image.PreviewGroup style={{ marginBottom: \"50px\" }}>\n            {userEmojiboards &&\n              userEmojiboards.length > 0 &&\n              userEmojiboards.map(emojiboard => (\n                <div style={{ display: \"inline-block\", marginBottom: \"30px\" }}>\n                  <Image className=\"img-shadow\" src={extractImage(emojiboard[1])} alt={emojiboard[0]} />\n                  <br />\n                  Emojiboard #{emojiboard[0]}\n                  <br />\n                  <a\n                    href={`https://rinkeby.opensea.io/assets/${OPENSEA_CONTRACT_ADDRESS}/${emojiboard[0]}`}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                    style={{ color: \"#fff\", fontWeight: \"normal\" }}\n                  >\n                    Check on OpenSea\n                  </a>\n                  <br />\n                </div>\n              ))}\n          </Image.PreviewGroup>\n        </div>\n      )}\n\n      <div style={{ margin: \"0px !important\", padding: \"10px 10px 30px 10px\", backgroundColor: \"#00BBF9\" }}>\n        <h3 className=\"h3-playful\">Recent Emojiboards</h3>\n        <Image.PreviewGroup style={{ marginBottom: \"50px\" }}>\n          {emojiboards &&\n            emojiboards.length > 0 &&\n            emojiboards.map(emojiboard => (\n              <div style={{ display: \"inline-block\", marginBottom: \"30px\" }}>\n                <Image className=\"img-shadow\" src={extractImage(emojiboard[1])} alt={emojiboard[0]} />\n                <br />\n                Emojiboard #{emojiboard[0]}\n                <br />\n                <a\n                  href={`https://rinkeby.opensea.io/assets/${OPENSEA_CONTRACT_ADDRESS}/${emojiboard[0]}`}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                  style={{ color: \"#fff\", fontWeight: \"normal\" }}\n                >\n                  Check on OpenSea\n                </a>\n                <br />\n              </div>\n            ))}\n        </Image.PreviewGroup>\n        <TotalSupply />\n      </div>\n    </>\n  );\n  // <Box sx={{ margin: \"0px !important\", padding: \"0px !important\" }}>\n  //   <Box sx={{ margin: \"0px !important\", padding: \"0px !important\" }}>\n  //     {userEmojiboards.length > 0 && (\n  //       <Box sx={{ backgroundColor: \"#00F5D4\", padding: \"15px\" }}>\n  //         <Typography\n  //           className=\"h3-playful\"\n  //           sx={{\n  //             lineHeight: 0.8,\n  //             textShadow: \"-0.04em 0.04em 0 #ffffff\",\n  //             fontWeight: 700,\n  //             padding: \"0.4em 0.6em\",\n  //           }}\n  //         >\n  //           Your Emojiboards ({userEmojiboards.length})\n  //         </Typography>\n  //         <Typography sx={{ mt: 5, mb: 3, fontWeight: \"700\" }} color=\"text.secondary\">\n  //           <ImageList sx={{ width: \"100%\", padding: \"5px\" }} gap={20}>\n  //             {userEmojiboards &&\n  //               userEmojiboards.length > 0 &&\n  //               userEmojiboards.map(emojiboard => (\n  //                 <ImageListItem key={emojiboard[0]}>\n  //                   <img\n  //                     src={extractImage(emojiboard[1])}\n  //                     alt={emojiboard[0]}\n  //                     loading=\"lazy\"\n  //                     className=\"img-shadow\"\n  //                   />\n\n  //                   <ImageListItemBar\n  //                     title={`Emojiboard #${emojiboard[0]}`}\n  //                     subtitle={\n  //                       <Link\n  //                         target=\"_blank\"\n  //                         href={`https://rinkeby.opensea.io/assets/${OPENSEA_CONTRACT_ADDRESS}/${emojiboard[0]}`}\n  //                         style={{ color: \"#fff\", fontWeight: \"normal\" }}\n  //                       >\n  //                         Check on OpenSea\n  //                       </Link>\n  //                     }\n  //                     position=\"below\"\n  //                   />\n  //                 </ImageListItem>\n  //               ))}\n  //           </ImageList>\n  //         </Typography>\n  //       </Box>\n  //     )}\n  //   </Box>\n  //   <Box sx={{ margin: \"0 !important\", padding: \"10px !important\", backgroundColor: \"#00BBF9\" }}>\n  //     <Typography sx={{ mt: 2, mb: 3 }} color=\"text.secondary\">\n  //       <Typography className=\"h3-playful\">Recent Emojiboards</Typography>\n  //       <ImageList sx={{ width: \"100%\", padding: \"5px\" }} cols={4} gap={20}>\n  //         {emojiboards &&\n  //           emojiboards.length > 0 &&\n  //           emojiboards.map(emojiboard => (\n  //             <ImageListItem key={emojiboard[0]}>\n  //               <img src={extractImage(emojiboard[1])} alt={emojiboard[0]} loading=\"lazy\" className=\"img-shadow\" />\n  //               <ImageListItemBar\n  //                 title={`Emojiboard #${emojiboard[0]}`}\n  //                 subtitle={\n  //                   <Link\n  //                     target=\"_blank\"\n  //                     href={`https://rinkeby.opensea.io/assets/${OPENSEA_CONTRACT_ADDRESS}/${emojiboard[0]}`}\n  //                     style={{ color: \"#fff\", fontWeight: \"normal\" }}\n  //                   >\n  //                     Check on OpenSea\n  //                   </Link>\n  //                 }\n  //                 position=\"below\"\n  //               />\n  //             </ImageListItem>\n  //           ))}\n  //       </ImageList>\n  //       <TotalSupply />\n  //     </Typography>\n  //   </Box>\n  // </Box>\n}\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 875;","import React, { useCallback, useEffect, useState } from \"react\";\nimport { NetworkDisplay, NetworkSwitch } from \"./../components\";\nimport { NETWORKS, ALCHEMY_KEY } from \"./../constants\";\n\n// contracts\nimport deployedContracts from \"./../contracts/hardhat_contracts.json\";\nimport externalContracts from \"./../contracts/external_contracts\";\n\nimport { Transactor, Web3ModalSetup } from \"./../helpers\";\nimport { useContractLoader, useContractReader, useUserProviderAndSigner } from \"eth-hooks\";\n\nimport { useStaticJsonRPC } from \"./../hooks\";\nimport { ethers } from \"ethers\";\nimport GraphemeSplitter from \"grapheme-splitter\";\n\nimport { Form, Input, Select, Tooltip, Button, Image, Typography } from \"antd\";\nimport { format } from \"prettier\";\n\nimport LoadingIndicator from \"./LoadingIndicator\";\nimport Emojiboards from \"./Emojiboards\";\n\n/// 📡 What chain are your contracts deployed to?\nconst initialNetwork = NETWORKS.rinkeby; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// 🛰 providers\nconst providers = [\n  \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\n  `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\n  \"https://rpc.scaffoldeth.io:48544\",\n];\n\nconst EmojiForm = () => {\n  const [emojiContract, setEmojiContract] = useState(null);\n  const [formValues, setFormValues] = useState(\"\");\n\n  const [mintState, setMintState] = useState(\"\");\n  const [mintedEmojiboard, setMintedEmojiboard] = useState([]);\n\n  const OPENSEA_CONTRACT_ADDRESS = process.env.REACT_APP_OPENSEA_CONTRACT_ADDRESS;\n\n  // specify all the chains your app is available on. Eg: ['localhost', 'mainnet', ...otherNetworks ]\n  // reference './constants.js' for other networks\n  const networkOptions = [initialNetwork.name, \"mainnet\", \"rinkeby\"];\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n\n  const web3Modal = Web3ModalSetup();\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  // const [address, setAddress] = useState();\n  const [selectedNetwork, setSelectedNetwork] = useState(networkOptions[0]);\n\n  const targetNetwork = NETWORKS[selectedNetwork];\n\n  // load all your providers\n  const localProvider = useStaticJsonRPC([\n    process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : targetNetwork.rpcUrl,\n  ]);\n\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider, false);\n\n  const userSigner = userProviderAndSigner.signer;\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  const mainnetProvider = useStaticJsonRPC(providers);\n\n  const contractConfig = { deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {} };\n\n  const readContracts = useContractLoader(localProvider, contractConfig);\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\n\n  const EmojiverseContract = writeContracts;\n\n  const EmojiverseContractRead = readContracts;\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n    // eslint-disable-next-line\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const handleSubmit = values => {\n    // values.preventDefault();\n    console.log(\"FormValues: \", values);\n\n    const emojis = [];\n    const messages = [];\n\n    if (values.msg1.message) {\n      messages.push(values.msg1.message);\n      if (values.msg1.message === \"gm\") {\n        emojis.push(\"\");\n      } else {\n        emojis.push(handleEmoji(values.msg1.emoji));\n      }\n    }\n\n    if (values.msg2.message) {\n      messages.push(values.msg2.message);\n      if (values.msg2.message === \"gm\") {\n        emojis.push(\"\");\n      } else {\n        emojis.push(handleEmoji(values.msg2.emoji));\n      }\n    }\n\n    if (values.msg3.message) {\n      messages.push(values.msg3.message);\n      if (values.msg3.message === \"gm\") {\n        emojis.push(\"\");\n      } else {\n        emojis.push(handleEmoji(values.msg3.emoji));\n      }\n    }\n\n    if (values.msg4.message) {\n      messages.push(values.msg4.message);\n      if (values.msg4.message === \"gm\") {\n        emojis.push(\"\");\n      } else {\n        emojis.push(handleEmoji(values.msg4.emoji));\n      }\n    }\n\n    console.log(\"Emojis\", emojis);\n    console.log(\"Messages\", messages);\n\n    askContractToMintNft(emojis, messages);\n  };\n\n  const askContractToMintNft = async (emojis, messages) => {\n    try {\n      if (EmojiverseContract) {\n        console.log(\"Minting NFT\");\n        setMintState(\"minting\");\n\n        const mintTxn = await writeContracts.Emojiverse.mintEmojiverseNFT(emojis, messages, { gasLimit: 5000000 });\n\n        console.log(`See transaction: https://rinkeby.etherscan.io/tx/${mintTxn.hash}`);\n        setMintState(\"minted\");\n\n        // Listen to the contract's CreatedEmojiboard event\n        readContracts.Emojiverse.on(\"CreatedEmojiboard\", (tokenId, tokenURI) => {\n          console.log(`Token #${tokenId} minted. tokenURI: ${tokenURI}`);\n\n          // Set the mintedEmojiboard in state.\n          setMintedEmojiboard([tokenId.toString(), JSON.parse(Buffer.from(tokenURI.substring(29), \"base64\")).image]);\n\n          // Wait 30 seconds and hide the message\n          setTimeout(() => setMintedEmojiboard([]), 30000);\n        }).on(\"error\", console.error);\n      } else {\n        console.log(\"Emoji contract not loaded\");\n      }\n    } catch (error) {\n      console.log(error);\n      setMintState(\"\");\n    }\n  };\n\n  const handleEmoji = msg => {\n    // Take an object with [message] and [emoji] keys\n    // If [message] is not set, do nothing\n    // If [message] is set and it's \"dm\", return just the message\n    // If [message] and [emoji] are set, trim [emoji] to one character and check if it is an emoji\n    // If it's not an emoji, return an error message\n    // Return [message] and [emoji]\n    const emojiRegex =\n      /(\\u00a9|\\u00ae|[\\u2000-\\u3300]|\\ud83c[\\ud000-\\udfff]|\\ud83d[\\ud000-\\udfff]|\\ud83e[\\ud000-\\udfff])/;\n\n    const emoji = GraphemeSplitter().splitGraphemes(msg)[0];\n    if (emojiRegex.test(emoji)) {\n      return emoji;\n    } else {\n      console.log(\"Emoji is not valid:\", emoji);\n      return \"Error: Emoji is not valid\";\n    }\n  };\n\n  function extractImage(uri) {\n    // Starting with character 30 because each uri start with this: \"data:application/json;base64,\"\n    return uri ? JSON.parse(Buffer.from(uri.substring(29), \"base64\")).image : \"\";\n  }\n\n  // useEffect(() => {\n  //   const { ethereum } = window;\n\n  //   ethereum ? console.log(\"ethereum\", ethereum) : console.log(\"no ethereum\");\n\n  //   if (ethereum) {\n  //     const provider = new ethers.providers.Web3Provider(ethereum);\n  //     const signer = provider.getSigner();\n  //     const emojiContract = new ethers.Contract(CONTRACT_ADDRESS, Emojiverse.abi, signer);\n\n  //     // Set the gameContract in state.\n  //     setEmojiContract(emojiContract);\n  //   } else {\n  //     console.log(\"Ethereum object not found\");\n  //   }\n  // }, []);\n\n  return (\n    <>\n      <div\n        style={{\n          maxWidth: \"600px\",\n          margin: \"1em auto\",\n          paddingLeft: \"24px\",\n          paddingRight: \"24px\",\n          paddingBottom: \"16px\",\n          paddingTop: \"16px\",\n          textAlign: \"center\",\n          fontSize: \"1rem\",\n        }}\n      >\n        <Tooltip title=\"If you're on your Mac, press: CONTROL + COMMAND + SPACE. On Windows, press: WINDOWS LOGO KEY + . (period)'\">\n          ❓ <span style={{ cursor: \"pointer\", textDecoration: \"underline dotted red\" }}>How to type an emoji?</span>\n        </Tooltip>\n        <div>\n          <Form\n            name=\"complex-form\"\n            // layout=\"inline\"\n            size=\"large\"\n            // onSubmit={handleSubmit}\n            onFinish={handleSubmit}\n            style={{ textAlign: \"left\", margin: \"2em auto 0 auto\", width: \"350px\" }}\n          >\n            <Form.Item style={{ margin: 0 }}>\n              <Input.Group>\n                <Form.Item\n                  name={[\"msg1\", \"message\"]}\n                  rules={[{ required: true, message: \"At least 1 msg is required\" }]}\n                  style={{ display: \"inline-block\" }}\n                >\n                  <Select\n                    placeholder=\"Message #1\"\n                    style={{ width: \"200px\", marginRight: \"10px\" }}\n                    onChange={e => {\n                      setFormValues({\n                        ...formValues,\n                        msg1: e,\n                      });\n                    }}\n                  >\n                    <Select.Option value=\"gm\">gm</Select.Option>\n                    <Select.Option value=\"I am...\">I am...</Select.Option>\n                    <Select.Option value=\"I feel...\">I feel...</Select.Option>\n                    <Select.Option value=\"I like...\">I like...</Select.Option>\n                    <Select.Option value=\"I want...\">I want...</Select.Option>\n                    <Select.Option value=\"I think...\">I think...</Select.Option>\n                    <Select.Option value=\"I do...\">I do...</Select.Option>\n                    <Select.Option value=\"I believe in...\">I believe in...</Select.Option>\n                    <Select.Option value=\"I build...\">I build...</Select.Option>\n                  </Select>\n                </Form.Item>\n                <Form.Item\n                  name={[\"msg1\", \"emoji\"]}\n                  // rules={[{ required: true, message: \"Emoji is required\" }]}\n                  onChange={e => {\n                    setFormValues({\n                      ...formValues,\n                      emoji1: e.target.value,\n                    });\n                  }}\n                  style={{\n                    display: \"inline-block\",\n                    visibility: formValues[\"msg1\"] === \"gm\" ? \"hidden\" : \"visible\",\n                  }}\n                >\n                  <Input style={{ width: \"140px\" }} maxLength=\"5\" placeholder=\"Enter 1 emoji\" />\n                </Form.Item>\n              </Input.Group>\n            </Form.Item>\n\n            <Form.Item style={{ margin: 0 }}>\n              <Input.Group>\n                <Form.Item name={[\"msg2\", \"message\"]} style={{ display: \"inline-block\" }}>\n                  <Select\n                    placeholder=\"Message #2\"\n                    style={{ width: \"200px\", marginRight: \"10px\" }}\n                    onChange={e => {\n                      setFormValues({\n                        ...formValues,\n                        msg2: e,\n                      });\n                    }}\n                  >\n                    <Select value=\"gm\">gm</Select>\n                    <Select value=\"I am...\">I am...</Select>\n                    <Select value=\"I feel...\">I feel...</Select>\n                    <Select value=\"I like...\">I like...</Select>\n                    <Select value=\"I want...\">I want...</Select>\n                    <Select value=\"I think...\">I think...</Select>\n                    <Select value=\"I do...\">I do...</Select>\n                    <Select value=\"I believe in...\">I believe in...</Select>\n                    <Select value=\"I build...\">I build...</Select>\n                  </Select>\n                </Form.Item>\n                <Form.Item\n                  name={[\"msg2\", \"emoji\"]}\n                  onChange={e => {\n                    setFormValues({\n                      ...formValues,\n                      emoji2: e.target.value,\n                    });\n                  }}\n                  style={{\n                    display: \"inline-block\",\n                    visibility: formValues[\"msg2\"] === \"gm\" ? \"hidden\" : \"visible\",\n                  }}\n                >\n                  <Input style={{ width: \"140px\" }} maxLength=\"5\" placeholder=\"Enter 1 emoji\" />\n                </Form.Item>\n              </Input.Group>\n            </Form.Item>\n\n            <Form.Item style={{ margin: 0 }}>\n              <Input.Group>\n                <Form.Item name={[\"msg3\", \"message\"]} style={{ display: \"inline-block\" }}>\n                  <Select\n                    placeholder=\"Message #3\"\n                    style={{ width: \"200px\", marginRight: \"10px\" }}\n                    onChange={e => {\n                      setFormValues({\n                        ...formValues,\n                        msg3: e,\n                      });\n                    }}\n                  >\n                    <Select value=\"gm\">gm</Select>\n                    <Select value=\"I am...\">I am...</Select>\n                    <Select value=\"I feel...\">I feel...</Select>\n                    <Select value=\"I like...\">I like...</Select>\n                    <Select value=\"I want...\">I want...</Select>\n                    <Select value=\"I think...\">I think...</Select>\n                    <Select value=\"I do...\">I do...</Select>\n                    <Select value=\"I believe in...\">I believe in...</Select>\n                    <Select value=\"I build...\">I build...</Select>\n                  </Select>\n                </Form.Item>\n                <Form.Item\n                  name={[\"msg3\", \"emoji\"]}\n                  onChange={e => {\n                    setFormValues({\n                      ...formValues,\n                      emoji3: e.target.value,\n                    });\n                  }}\n                  style={{\n                    display: \"inline-block\",\n                    visibility: formValues[\"msg3\"] === \"gm\" ? \"hidden\" : \"visible\",\n                  }}\n                >\n                  <Input style={{ width: \"140px\" }} maxLength=\"5\" placeholder=\"Enter 1 emoji\" />\n                </Form.Item>\n              </Input.Group>\n            </Form.Item>\n\n            <Form.Item style={{ margin: 0 }}>\n              <Input.Group>\n                <Form.Item name={[\"msg4\", \"message\"]} style={{ display: \"inline-block\" }}>\n                  <Select\n                    placeholder=\"Message #4\"\n                    style={{ width: \"200px\", marginRight: \"10px\" }}\n                    onChange={e => {\n                      setFormValues({\n                        ...formValues,\n                        msg4: e,\n                      });\n                    }}\n                  >\n                    <Select value=\"gm\">gm</Select>\n                    <Select value=\"I am...\">I am...</Select>\n                    <Select value=\"I feel...\">I feel...</Select>\n                    <Select value=\"I like...\">I like...</Select>\n                    <Select value=\"I want...\">I want...</Select>\n                    <Select value=\"I think...\">I think...</Select>\n                    <Select value=\"I do...\">I do...</Select>\n                    <Select value=\"I believe in...\">I believe in...</Select>\n                    <Select value=\"I build...\">I build...</Select>\n                  </Select>\n                </Form.Item>\n                <Form.Item\n                  name={[\"msg4\", \"emoji\"]}\n                  onChange={e => {\n                    setFormValues({\n                      ...formValues,\n                      emoji4: e.target.value,\n                    });\n                  }}\n                  style={{\n                    display: \"inline-block\",\n                    visibility: formValues[\"msg4\"] === \"gm\" ? \"hidden\" : \"visible\",\n                  }}\n                >\n                  <Input style={{ width: \"140px\" }} maxLength=\"5\" placeholder=\"Enter 1 emoji\" />\n                </Form.Item>\n              </Input.Group>\n            </Form.Item>\n\n            <Form.Item colon={false} style={{ margin: \"0 auto\", display: \"inline-block\", width: \"100%\" }}>\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                disabled={mintState === \"minting\" && \"true\"}\n                style={{ margin: \"0 auto\", width: \"100%\" }}\n              >\n                Create your Emojiboard\n              </Button>\n            </Form.Item>\n            {mintState === \"minting\" && (\n              <div className=\"loading-indicator\">\n                <LoadingIndicator />\n                <p style={{ marginLeft: \"50px\", paddingTop: \"10px\", marginBottom: \"0px\" }}>\n                  Creating your Emojiboard...\n                </p>\n              </div>\n            )}\n          </Form>\n        </div>\n      </div>\n      {mintedEmojiboard.length > 0 && (\n        <div\n          style={{\n            maxWidth: \"800px\",\n            margin: \"1em auto\",\n            backgroundColor: \"#F15BB5\",\n            padding: \"20px\",\n            borderRadius: \"10px\",\n          }}\n        >\n          <h3\n            style={{\n              fontFamily: \"Darker Grotesque\",\n              color: \"#00BBF9\",\n              fontSize: \"3rem\",\n              margin: \"0 0 20px 0\",\n              textShadow: \"-0.04em 0.04em 0 #FEE440\",\n              \"-webkit-text-stroke\": \"0.015em #FEE440\",\n              lineHeight: 0.8,\n              fontWeight: 700,\n              padding: \"0.4em 0.6em\",\n            }}\n          >\n            You have minted your Emojiboard!\n          </h3>\n          <Typography style={{ pt: \"10px\", pb: \"30px\", fontWeight: 400, textAlign: \"left\", color: \"#fff\" }}>\n            It can take a while for your Emojiboard to be available on OpenSea. You can try reloading in 1-2 minutes.\n            <br />\n            In the meantime, here's how your Emojiboard is going to look like:\n          </Typography>\n          <Image.PreviewGroup style={{ marginBottom: \"50px\" }}>\n            <div style={{ display: \"inline-block\", marginBottom: \"30px\" }}>\n              <Image className=\"img-shadow\" src={mintedEmojiboard[1]} alt={mintedEmojiboard[0]} />\n              <br />\n              Emojiboard #{mintedEmojiboard[0]}\n              <br />\n              <a\n                href={`https://rinkeby.opensea.io/assets/${OPENSEA_CONTRACT_ADDRESS}/${mintedEmojiboard[0]}`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                style={{ color: \"#fff\", fontWeight: \"normal\" }}\n              >\n                Check on OpenSea\n              </a>\n              <br />\n            </div>\n          </Image.PreviewGroup>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default EmojiForm;\n","import React from \"react\";\nimport \"../index.css\";\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n"],"sourceRoot":""}